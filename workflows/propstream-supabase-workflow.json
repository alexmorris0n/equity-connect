{
  "name": "PropStream + Supabase Multi-Broker Lead Automation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * *"
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Daily Lead Pull Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "broker",
              "value": "smith"
            },
            {
              "name": "searchId",
              "value": "Broker-Smith-95112,95113,95116"
            },
            {
              "name": "quota",
              "value": "100"
            },
            {
              "name": "campaignId",
              "value": "INST_Smith"
            }
          ]
        },
        "options": {}
      },
      "id": "broker-config",
      "name": "Broker Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [460, 300]
    },
    {
      "parameters": {
        "values": {
          "object": {
            "usable": [],
            "attempts": 0,
            "quota": "={{$json.quota}}"
          }
        },
        "options": {}
      },
      "id": "init-accumulator",
      "name": "Initialize Accumulator",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "quota-check",
              "leftValue": "={{$json.usable.length}}",
              "rightValue": "={{$json.quota}}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            },
            {
              "id": "attempts-check",
              "leftValue": "={{$json.attempts}}",
              "rightValue": 8,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "loop-condition",
      "name": "Loop Until Quota Filled",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "https://api.propstream.com/v1/exports/net-new",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "propstreamApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "savedSearchId",
              "value": "={{$('broker-config').item.json.searchId}}"
            },
            {
              "name": "limit",
              "value": "200"
            }
          ]
        },
        "options": {}
      },
      "id": "propstream-net-new",
      "name": "PropStream Net-New Export",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "url": "https://api.propstream.com/v1/skip-trace",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "propstreamApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "items",
              "value": "={{$json.data.records}}"
            }
          ]
        },
        "options": {}
      },
      "id": "propstream-skip-trace",
      "name": "PropStream Skip Trace",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "functionCode": "const batch = items[0].json.results || [];\nconst out = batch.filter(r => {\n  const hasPhone = Array.isArray(r.phone) ? r.phone.some(p=>!!p) : !!r.phone;\n  const hasEmail = Array.isArray(r.email) ? r.email.some(e=>!!e) : !!r.email;\n  return hasPhone || hasEmail;\n});\nreturn out.map(r => ({json:r}));"
      },
      "id": "filter-contactable",
      "name": "Filter Contactable Leads",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "functionCode": "const state = $('init-accumulator').item.json;\nconst batch = items.map(i=>i.json);\nconst incoming = Array.isArray(batch) ? batch : [batch];\nconst merged = (state.usable||[]).concat(incoming);\n\nconst seen = new Set();\nconst unique = merged.filter(it => {\n  const key = it.property_id || (it.address + '|' + it.owner_lastname);\n  if (seen.has(key)) return false;\n  seen.add(key);\n  return true;\n});\n\nreturn [{\n  json: {\n    ...state,\n    usable: unique.slice(0, state.quota),\n    attempts: (state.attempts||0)+1\n  }\n}];"
      },
      "id": "accumulate-leads",
      "name": "Accumulate Leads",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "url": "https://your-project.supabase.co/rest/v1/leads",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$credentials.supabaseApi.apiKey}}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.supabaseApi.serviceRoleKey}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "first_name",
              "value": "={{$json.first_name}}"
            },
            {
              "name": "last_name",
              "value": "={{$json.last_name}}"
            },
            {
              "name": "email",
              "value": "={{$json.email}}"
            },
            {
              "name": "phone",
              "value": "={{$json.phone}}"
            },
            {
              "name": "property_address",
              "value": "={{$json.address}}"
            },
            {
              "name": "property_city",
              "value": "={{$json.city}}"
            },
            {
              "name": "property_state",
              "value": "={{$json.state}}"
            },
            {
              "name": "property_zip",
              "value": "={{$json.zip}}"
            },
            {
              "name": "property_value",
              "value": "={{$json.property_value}}"
            },
            {
              "name": "estimated_equity",
              "value": "={{$json.estimated_equity}}"
            },
            {
              "name": "age",
              "value": "={{$json.age}}"
            },
            {
              "name": "owner_occupied",
              "value": "={{$json.owner_occupied}}"
            },
            {
              "name": "assigned_broker_id",
              "value": "={{$('broker-config').item.json.broker_id}}"
            },
            {
              "name": "source",
              "value": "PropStream API"
            },
            {
              "name": "status",
              "value": "new"
            }
          ]
        },
        "options": {}
      },
      "id": "supabase-lead-creation",
      "name": "Create Lead in Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "functionCode": "// Generate consent token for Instantly\nconst crypto = require('crypto');\nconst leadData = $('supabase-lead-creation').item.json[0];\nconst brokerConfig = $('broker-config').item.json;\n\n// Create JWT payload\nconst payload = {\n  sub: leadData.id,\n  broker_id: brokerConfig.broker_id,\n  first_name: leadData.first_name,\n  last_name: leadData.last_name,\n  email: leadData.email,\n  phone: leadData.phone,\n  utm_campaign: 'rm-default',\n  utm_source: 'email',\n  utm_medium: 'email',\n  exp: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 7 days\n  iat: Math.floor(Date.now() / 1000)\n};\n\n// Get secret from environment\nconst secret = process.env.FORM_LINK_SECRET || 'your-secret-key-change-this';\n\n// Create the data to sign\nconst dataToSign = JSON.stringify(payload);\n\n// Generate HMAC signature\nconst signature = crypto\n  .createHmac('sha256', secret)\n  .update(dataToSign)\n  .digest('base64url');\n\n// Create the final token\nconst token = Buffer.from(dataToSign).toString('base64url') + '.' + signature;\n\n// Generate consent URL\nconst baseUrl = process.env.CONSENT_FORM_URL || 'https://form.equityconnect.com';\nconst consentUrl = `${baseUrl}/consent?token=${token}`;\n\n// Generate simple URL (fallback)\nconst simpleUrl = `${baseUrl}/consent?` + new URLSearchParams({\n  first: leadData.first_name,\n  last: leadData.last_name,\n  email: leadData.email,\n  phone: leadData.phone,\n  broker: brokerConfig.broker_id,\n  leadId: leadData.id,\n  utm_campaign: 'rm-default'\n}).toString();\n\nreturn [{\n  json: {\n    ...leadData,\n    consent_token: token,\n    consent_url: consentUrl,\n    simple_consent_url: simpleUrl,\n    broker_name: brokerConfig.broker_name || brokerConfig.broker_id\n  }\n}];"
      },
      "id": "generate-consent-token",
      "name": "Generate Consent Token",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "url": "https://api.instantly.ai/v1/campaigns/{{$('broker-config').item.json.campaignId}}/leads/import",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "instantlyApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{$json.email}}"
            },
            {
              "name": "firstName",
              "value": "={{$json.first_name}}"
            },
            {
              "name": "lastName",
              "value": "={{$json.last_name}}"
            },
            {
              "name": "customFields",
              "value": "={{JSON.stringify({property_address: $json.property_address, estimated_equity: $json.estimated_equity, broker: $('broker-config').item.json.broker, consent_token: $json.consent_token, consent_url: $json.consent_url, simple_consent_url: $json.simple_consent_url, broker_name: $json.broker_name})}}"
            }
          ]
        },
        "options": {}
      },
      "id": "instantly-import",
      "name": "Import to Instantly",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "operation": "getRows",
        "tableName": "phone_assignments",
        "options": {
          "filter": {
            "conditions": [
              {
                "column": "lead_id",
                "operator": "equals",
                "value": "={{$('supabase-lead-creation').item.json.id}}"
              },
              {
                "column": "status",
                "operator": "in",
                "value": "active,booked_locked"
              }
            ]
          }
        }
      },
      "id": "check-existing-assignment",
      "name": "Check Existing Assignment",
      "type": "n8n-nodes-base.table",
      "typeVersion": 1,
      "position": [2440, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-assignment",
              "leftValue": "={{$json.length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "has-existing-assignment",
      "name": "Has Existing Assignment?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2660, 300]
    },
    {
      "parameters": {
        "operation": "getRows",
        "tableName": "phone_pool",
        "options": {
          "filter": {
            "conditions": [
              {
                "column": "broker_id",
                "operator": "equals",
                "value": "={{$('broker-config').item.json.broker_id}}"
              },
              {
                "column": "is_available",
                "operator": "equals",
                "value": true
              },
              {
                "column": "state",
                "operator": "equals",
                "value": "={{$('supabase-lead-creation').item.json.property_state}}"
              }
            ]
          },
          "sort": [
            {
              "column": "health_score",
              "direction": "desc"
            }
          ],
          "limit": 1
        }
      },
      "id": "get-best-available-number",
      "name": "Get Best Available Number",
      "type": "n8n-nodes-base.table",
      "typeVersion": 1,
      "position": [2880, 200]
    },
    {
      "parameters": {
        "operation": "insertRow",
        "tableName": "phone_assignments",
        "columns": {
          "lead_id": "={{$('supabase-lead-creation').item.json.id}}",
          "phone_number": "={{$json[0].number}}",
          "broker_id": "={{$('broker-config').item.json.broker_id}}",
          "status": "active",
          "max_attempts": 5,
          "assigned_at": "={{new Date().toISOString()}}",
          "call_attempts": 0
        }
      },
      "id": "create-phone-assignment",
      "name": "Create Phone Assignment",
      "type": "n8n-nodes-base.table",
      "typeVersion": 1,
      "position": [3100, 200]
    },
    {
      "parameters": {
        "functionCode": "// Update accumulator with new state\nconst currentState = $('init-accumulator').item.json;\nconst newState = $('accumulate-leads').item.json;\n\nreturn [{\n  json: {\n    ...currentState,\n    usable: newState.usable,\n    attempts: newState.attempts,\n    quota: newState.quota\n  }\n}];"
      },
      "id": "update-accumulator",
      "name": "Update Accumulator State",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 400]
    }
  ],
  "connections": {
    "schedule-trigger": {
      "main": [
        [
          {
            "node": "broker-config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "broker-config": {
      "main": [
        [
          {
            "node": "init-accumulator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "init-accumulator": {
      "main": [
        [
          {
            "node": "loop-condition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop-condition": {
      "main": [
        [
          {
            "node": "propstream-net-new",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "supabase-lead-creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "propstream-net-new": {
      "main": [
        [
          {
            "node": "propstream-skip-trace",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "propstream-skip-trace": {
      "main": [
        [
          {
            "node": "filter-contactable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter-contactable": {
      "main": [
        [
          {
            "node": "accumulate-leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "accumulate-leads": {
      "main": [
        [
          {
            "node": "update-accumulator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-accumulator": {
      "main": [
        [
          {
            "node": "loop-condition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "supabase-lead-creation": {
      "main": [
        [
          {
            "node": "generate-consent-token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-consent-token": {
      "main": [
        [
          {
            "node": "instantly-import",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "instantly-import": {
      "main": [
        [
          {
            "node": "check-existing-assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-existing-assignment": {
      "main": [
        [
          {
            "node": "has-existing-assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has-existing-assignment": {
      "main": [
        [
          {
            "node": "get-best-available-number",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "update-accumulator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-best-available-number": {
      "main": [
        [
          {
            "node": "create-phone-assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-phone-assignment": {
      "main": [
        [
          {
            "node": "update-accumulator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}
