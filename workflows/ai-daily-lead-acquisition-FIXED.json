{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1,
                2,
                3,
                4,
                5
              ],
              "triggerAtHour": 6
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1120,
        48
      ],
      "id": "e7295c31-bb47-4593-a7e9-2315159387cf",
      "name": "Daily Trigger (6am PT)"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "brokers",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "active"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -896,
        48
      ],
      "id": "789b8d5e-9202-4e7b-adbf-cc1e996b89ee",
      "name": "Fetch Active Brokers",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -672,
        48
      ],
      "id": "7695f2fe-7eec-45be-b849-727a45db74c5",
      "name": "Loop Over Brokers"
    },
    {
      "parameters": {
        "jsCode": "// Prepare broker context for AI agent\nconst broker = $input.first().json;\n\nif (!broker.propertyradar_list_id) {\n  throw new Error(`Broker ${broker.company_name} missing propertyradar_list_id. Create list in PropertyRadar first.`);\n}\n\nconst context = {\n  broker_id: broker.id,\n  broker_name: broker.company_name,\n  broker_contact_name: broker.contact_name || broker.company_name,\n  broker_nmls: broker.nmls_number || '',\n  list_id: broker.propertyradar_list_id,\n  current_offset: broker.propertyradar_offset || 0,\n  daily_capacity: broker.daily_lead_capacity || 250,\n  execution_id: $execution.id,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log(`🚀 Starting AI Workflow`);\nconsole.log(`Broker: ${context.broker_name}`);\nconsole.log(`Target: ${context.daily_capacity} enriched leads`);\nconsole.log(`Current Offset: ${context.current_offset}`);\nconsole.log(`List ID: ${context.list_id}`);\nconsole.log(`Execution: ${context.execution_id}`);\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\nreturn [{ json: context }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        64
      ],
      "id": "cf9d2b3f-1569-43bd-8f05-f6f2fefd554a",
      "name": "Prepare Broker Context"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# AI Lead Controller\n\n**Broker:** {{ $json.broker_name }} ({{ $json.broker_id }})\n**Target:** {{ $json.daily_capacity }} enriched leads\n**List:** {{ $json.list_id }} | **Offset:** {{ $json.current_offset }}\n\n═══════════════════════════════════════════\n🎯 MISSION\n═══════════════════════════════════════════\n\nPull properties → Enrich contacts → Insert DB → Loop until target → Upload campaigns\n\n═══════════════════════════════════════════\n📊 STATE (Update After Each Iteration)\n═══════════════════════════════════════════\n\n```json\n{\"target\":{{ $json.daily_capacity }},\"enriched\":0,\"offset\":{{ $json.current_offset }},\"iteration\":0,\"batch\":30,\"pulled\":0,\"dupes\":0}\n```\n\nLog after each iteration:\n\"STATE: enriched={enriched}/{target}, offset={offset}, iteration={iteration}, batch={batch}, dupes={dupes}\"\n\n═══════════════════════════════════════════\n🔧 TOOLS (You Have Access To)\n═══════════════════════════════════════════\n\n**Supabase MCP:** count_enriched_today(broker_id), filter_new_radar_ids(ids[]), update_broker_offset(broker_id, increment)\n\n**PropertyRadar:** method='GET|POST', endpoint='/path?query=params', body={}\n- GET /lists/{id}/items?Start={offset}&Limit={batch}\n- POST /properties?Purchase=1, body={Criteria:[{name:'RadarID',value:[...]}]}\n- GET /properties/{id}/persons?Purchase=1&Fields=FirstName,LastName,Email,Phone\n\n**BatchData:** method='POST', endpoint='/api/v1/property/skip-trace', body={requests:[{propertyAddress:{...}}]}\n\n**Instantly MCP:** create_lead(campaign_id, email, first_name, last_name, custom_variables)\n\n═══════════════════════════════════════════\n📋 WORKFLOW\n═══════════════════════════════════════════\n\n**PHASE 1: PULL & ENRICH (Loop until target reached)**\n\n```\nLOOP:\n1. Count: SELECT count_enriched_today('{{ $json.broker_id }}')\n2. IF enriched >= target → PHASE 2\n3. remaining = target - enriched, batch = min(30 + iteration*5, 50)\n4. Pull: propertyradar_api {method:'GET', endpoint:'/lists/{{ $json.list_id }}/items?Start={offset}&Limit={batch}', body:{}}\n5. Filter: SELECT * FROM filter_new_radar_ids([...])\n6. IF all_dupes → update_broker_offset, offset+=batch, LOOP\n7. Buy: propertyradar_api {method:'POST', endpoint:'/properties?Purchase=1', body:{Criteria:[{name:'RadarID',value:[...]}]}}\n8. FOR EACH property:\n   - propertyradar_api {method:'GET', endpoint:'/properties/{radar_id}/persons?Purchase=1&Fields=FirstName,LastName,Email,Phone', body:{}}\n   - Parse: extract best email/phone, calc quality (0-100)\n   - IF quality<70 → batchdata_api {method:'POST', endpoint:'/api/v1/property/skip-trace', body:{requests:[...]}}\n   - Merge best, INSERT INTO leads (radar_id, first_name, last_name, primary_email, primary_phone, ...)\n9. Update: SELECT update_broker_offset({{ $json.broker_id }}, {batch})\n10. iteration++, offset+=batch\n11. IF iteration>=30 OR pulled>=target*2 → PHASE 2\n12. Log state, LOOP to step 1\n```\n\n**PHASE 2: CAMPAIGN UPLOAD**\n\n```\n1. Campaigns: SELECT archetype, instantly_campaign_id FROM campaigns WHERE active=true\n2. Leads: SELECT id, first_name, primary_email, property_value, estimated_equity FROM leads WHERE assigned_broker_id='{{ $json.broker_id }}' AND DATE(created_at AT TIME ZONE 'America/Los_Angeles')=CURRENT_DATE AND primary_email IS NOT NULL AND campaign_status IS NULL\n3. FOR EACH lead:\n   - archetype = equity_pct>=80 ? 'high_equity' : equity_pct>=50 ? 'cash_unlocked' : 'no_payments'\n   - create_lead(campaign_id, email, first_name, last_name, {property_value, estimated_equity, ...})\n4. UPDATE leads SET campaign_status='active', campaign_archetype=... WHERE ...\n5. DONE\n```\n\n═══════════════════════════════════════════\n⚠️ RULES\n═══════════════════════════════════════════\n\n- Max 30 iterations\n- Max pulls = target * 2\n- Stop if 3 consecutive all-dupe batches\n- Only count enriched if email OR phone exists\n- PropertyRadar = primary enrichment, BatchData = fallback only\n- Log state after EVERY iteration\n- Validate tool params before calling\n\n═══════════════════════════════════════════\n🚀 EXECUTION PROTOCOL\n═══════════════════════════════════════════\n\n**DO NOT just describe actions - EXECUTE them!**\n\n❌ WRONG: \"I'll call PropertyRadar with method='GET'...\" [then stop]\n✅ CORRECT: \"Calling PropertyRadar...\" [actually calls, processes result, continues]\n\nAfter EVERY tool call:\n1. Get result\n2. Process it\n3. Log it\n4. Move to next step\n5. Repeat\n\n**COMPLETE the entire workflow. Do not stop until PHASE 2 is finished.**\n\n═══════════════════════════════════════════\n🚀 START NOW\n═══════════════════════════════════════════\n\n**FIRST ACTION (DO THIS NOW, NOT JUST DESCRIBE IT):**\n\nExecute: SELECT count_enriched_today('{{ $json.broker_id }}')\n\nThen immediately continue with rest of workflow.\n\n**EXECUTE. DO NOT DESCRIBE.**",
        "options": {
          "maxIterations": 15
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -208,
        64
      ],
      "id": "3883af67-22bc-4b51-a439-c3a6a32de42d",
      "name": "🤖 AI Controller"
    },
    {
      "parameters": {
        "model": "anthropic/claude-3.5-haiku",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -400,
        336
      ],
      "id": "bd51eaf3-4e1a-437d-9c31-67a68348434b",
      "name": "Claude Haiku 3.5",
      "credentials": {
        "openRouterApi": {
          "id": "5pEBmsekpDy6GZN0",
          "name": "OpenRouter n8n"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "https://mcp.supabase.com/mcp?project_ref=mxnqfwuhvurajrgoefyg",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [
        -272,
        336
      ],
      "id": "fdd7478a-8994-4763-9979-f566d0a87fb5",
      "name": "💾 Supabase MCP",
      "credentials": {
        "httpHeaderAuth": {
          "id": "uDlSOCPkKkn2ug5S",
          "name": "SupaBase MCP"
        }
      },
      "notes": "SQL functions ready: count_enriched_today(), filter_new_radar_ids(), update_broker_offset()"
    },
    {
      "parameters": {
        "toolDescription": "PropertyRadar API tool. Call with JSON: {\"method\": \"GET\"|\"POST\", \"endpoint\": \"/path?query=params\", \"body\": {}}. Include query params IN the endpoint URL. Examples: {\"method\":\"GET\",\"endpoint\":\"/lists/1104847/items?Start=0&Limit=30\",\"body\":{}}, {\"method\":\"POST\",\"endpoint\":\"/properties?Purchase=1\",\"body\":{\"Criteria\":[{\"name\":\"RadarID\",\"value\":[\"P123\"]}]}}, {\"method\":\"GET\",\"endpoint\":\"/properties/P123ABC/persons?Purchase=1&Fields=FirstName,LastName,Email,Phone\",\"body\":{}}",
        "method": "={{ $fromAI('method', 'GET') }}",
        "url": "={{ 'https://api.propertyradar.com/v1' + ($fromAI('endpoint', '/properties')) }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $fromAI('body', {}) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -144,
        336
      ],
      "id": "300ac601-9acc-4ac2-ab90-93df5d3931e8",
      "name": "🏘️ PropertyRadar",
      "credentials": {
        "httpBearerAuth": {
          "id": "81i7WbQilIMSh4E3",
          "name": "PropertyRadar"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "BatchData skip-trace API. Call with JSON: {\"method\": \"POST\", \"endpoint\": \"/api/v1/property/skip-trace\", \"body\": {\"requests\": [{\"propertyAddress\": {\"addressLine1\": \"123 Main St\", \"city\": \"Los Angeles\", \"state\": \"CA\", \"zip\": \"90001\"}}]}}. Always POST to this exact endpoint with propertyAddress in body.",
        "method": "={{ $fromAI('method', 'POST') }}",
        "url": "={{ 'https://api.batchdata.com' + ($fromAI('endpoint', '/api/v1/property/skip-trace')) }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $fromAI('body', {}) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -16,
        336
      ],
      "id": "0e3dae50-5369-4bd9-82d7-be4f2c996e1a",
      "name": "📊 BatchData",
      "credentials": {
        "httpHeaderAuth": {
          "id": "p8VumHgaWWJQT1Wp",
          "name": "BatchData API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const output = $input.first().json;\nconst context = $('Prepare Broker Context').first().json;\n\nconst result = output.output || output.text || JSON.stringify(output);\n\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log('✅ AI CONTROLLER COMPLETE');\nconsole.log(`Broker: ${context.broker_name}`);\nconsole.log(`Target: ${context.daily_capacity}`);\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log(result);\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\nreturn [{\n  json: {\n    success: true,\n    broker_id: context.broker_id,\n    broker_name: context.broker_name,\n    target: context.daily_capacity,\n    output: result,\n    completed_at: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        64
      ],
      "id": "af3153ca-b706-4c59-b978-76ecf77e58a4",
      "name": "📊 Parse Results"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        368,
        64
      ],
      "id": "02102cdd-4c48-42e1-8d39-914644ae552b",
      "name": "✅ Broker Complete"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -448,
        -128
      ],
      "id": "e19daf9f-3a07-474a-a818-9cee4eecaa25",
      "name": "🎉 All Brokers Done"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        -1008,
        368
      ],
      "id": "d69a3348-d6f1-4370-89f9-71a3e96d400f",
      "name": "Error Trigger"
    },
    {
      "parameters": {
        "jsCode": "const error = $input.first().json;\nconst broker = $('Prepare Broker Context').first()?.json;\n\nconsole.error('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.error('❌ AI CONTROLLER ERROR');\nconsole.error(`Broker: ${broker?.broker_name || 'Unknown'}`);\nconsole.error(`Error: ${error.message}`);\nconsole.error(`Node: ${error.node?.name}`);\nconsole.error('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\n// TODO: Send alert (Slack, email, SMS)\n\nreturn [{\n  json: {\n    error: true,\n    broker_id: broker?.broker_id,\n    broker_name: broker?.broker_name,\n    error_message: error.message,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        368
      ],
      "id": "cbddc7c1-bbe4-4a67-8989-c5e8a46545da",
      "name": "❌ Log Error"
    },
    {
      "parameters": {
        "endpointUrl": "https://mcp.instantly.ai/mcp",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [
        112,
        336
      ],
      "id": "de6327e6-58a0-4e90-9f85-40e2660f2818",
      "name": "📧 Instantly MCP",
      "credentials": {
        "httpHeaderAuth": {
          "id": "T3VkmA0F515ckuYB",
          "name": "Instantly API"
        }
      }
    }
  ],
  "connections": {
    "Daily Trigger (6am PT)": {
      "main": [
        [
          {
            "node": "Fetch Active Brokers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Brokers": {
      "main": [
        [
          {
            "node": "Loop Over Brokers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Brokers": {
      "main": [
        [
          {
            "node": "🎉 All Brokers Done",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Broker Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Broker Context": {
      "main": [
        [
          {
            "node": "🤖 AI Controller",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🤖 AI Controller": {
      "main": [
        [
          {
            "node": "📊 Parse Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude Sonnet 4.5": {
      "ai_languageModel": [
        [
          {
            "node": "🤖 AI Controller",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "💾 Supabase MCP": {
      "ai_tool": [
        [
          {
            "node": "🤖 AI Controller",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "🏘️ PropertyRadar": {
      "ai_tool": [
        [
          {
            "node": "🤖 AI Controller",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "📊 BatchData": {
      "ai_tool": [
        [
          {
            "node": "🤖 AI Controller",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "📊 Parse Results": {
      "main": [
        [
          {
            "node": "✅ Broker Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "✅ Broker Complete": {
      "main": [
        [
          {
            "node": "Loop Over Brokers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "❌ Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📧 Instantly MCP": {
      "ai_tool": [
        [
          {
            "node": "🤖 AI Controller",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4ca45576dabef27a95f92525a5f6415fb3e8061f7037b2ec7fb4ba1bb1cb56c0"
  }
}