{
  "name": "PropertyRadar - Create Dynamic List (One-Time Helper)",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [100, 300]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "brokers",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "6a3c5ed5-664a-4e13-b019-99fe8db74174"
            }
          ]
        }
      },
      "id": "get-broker",
      "name": "Get Broker",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [300, 300],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "broker_territories",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "broker_id",
              "condition": "eq",
              "keyValue": "6a3c5ed5-664a-4e13-b019-99fe8db74174"
            },
            {
              "keyName": "active",
              "condition": "eq",
              "keyValue": "true"
            }
          ]
        }
      },
      "id": "get-territories",
      "name": "Get Broker Territories",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [500, 300],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare PropertyRadar list creation request\nconst broker = $('Get Broker').first().json;\nconst territories = $input.all().map(t => t.json);\n\nconst zipCodes = territories.map(t => t.zip_code).sort();\n\nconsole.log(`Creating list for ${broker.company_name}`);\nconsole.log(`ZIPs: ${zipCodes.length} total`);\n\n// Generate unique list name with timestamp\nconst timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');\nconst listName = `RM_${broker.company_name.replace(/\\s+/g, '_')}_${timestamp}`;\n\nreturn [{\n  json: {\n    broker_id: broker.id,\n    broker_name: broker.company_name,\n    list_name: listName,\n    zip_codes: zipCodes\n  }\n}];"
      },
      "id": "prepare-list-data",
      "name": "Prepare List Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.propertyradar.com/v1/lists",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  ListName: $json.list_name,\n  Criteria: [\n    {name: 'ZipFive', value: $json.zip_codes},\n    {name: 'Age', value: [[62, null]]},\n    {name: 'AvailableEquity', value: [[100000, null]]},\n    {name: 'EquityPercent', value: [[40, null]]},\n    {name: 'isSameMailingOrExempt', value: [1]},\n    {name: 'PropertyType', value: [{name: 'PType', value: ['SFR', 'TWN', 'DPX', 'TPX', 'FPX']}]},\n    {name: 'AVM', value: [[400000, 3000000]]},\n    {name: 'CLTV', value: [[null, 60]]}\n  ]\n}) }}",
        "options": {}
      },
      "id": "create-list",
      "name": "Create PropertyRadar List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300],
      "credentials": {
        "httpBearerAuth": {
          "id": "81i7WbQilIMSh4E3",
          "name": "PropertyRadar"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract list ID from PropertyRadar response\nconst prResponse = $input.first().json;\nconst brokerData = $('Prepare List Data').first().json;\n\n// PropertyRadar returns: { results: [{ ListID: 1104668, TotalCount: \"52823\" }] }\nconst results = prResponse.results || [];\nconst listId = results[0]?.ListID || prResponse.id || prResponse.ListID;\nconst totalCount = results[0]?.TotalCount;\n\nif (!listId) {\n  throw new Error('PropertyRadar did not return a list ID: ' + JSON.stringify(prResponse));\n}\n\nconsole.log('=================================');\nconsole.log('PropertyRadar List Created!');\nconsole.log(`List Name: ${brokerData.list_name}`);\nconsole.log(`List ID: ${listId}`);\nconsole.log(`Total Properties: ${totalCount}`);\nconsole.log(`Broker: ${brokerData.broker_name}`);\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    broker_id: brokerData.broker_id,\n    broker_name: brokerData.broker_name,\n    list_id: String(listId),\n    list_name: brokerData.list_name,\n    total_properties: totalCount\n  }\n}];"
      },
      "id": "extract-list-id",
      "name": "Extract List ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/update_broker_list_id",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"p_broker_id\": $json.broker_id, \"p_list_id\": $json.list_id } }}",
        "options": {}
      },
      "id": "update-broker",
      "name": "Update Broker Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1300, 300],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Final confirmation\nconst result = $input.first().json;\n\nconsole.log('=================================');\nconsole.log('âœ“ SETUP COMPLETE');\nconsole.log(`Broker record updated`);\nconsole.log(`PropertyRadar List ID: ${$('Extract List ID').first().json.list_id}`);\nconsole.log('=================================');\nconsole.log('Next step: Run the main PropertyRadar List Pull Worker workflow');\n\nreturn [{\n  json: {\n    status: 'complete',\n    message: 'Broker setup complete. Ready to run main workflow.',\n    list_id: $('Extract List ID').first().json.list_id,\n    broker_name: $('Extract List ID').first().json.broker_name\n  }\n}];"
      },
      "id": "final-confirmation",
      "name": "Final Confirmation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1500, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get Broker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Broker": {
      "main": [
        [
          {
            "node": "Get Broker Territories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Broker Territories": {
      "main": [
        [
          {
            "node": "Prepare List Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare List Data": {
      "main": [
        [
          {
            "node": "Create PropertyRadar List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create PropertyRadar List": {
      "main": [
        [
          {
            "node": "Extract List ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract List ID": {
      "main": [
        [
          {
            "node": "Update Broker Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Broker Record": {
      "main": [
        [
          {
            "node": "Final Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "pinData": {},
  "tags": []
}

