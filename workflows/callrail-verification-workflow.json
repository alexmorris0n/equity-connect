{
  "name": "CallRail Show Verification Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "callrail-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "CallRail Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "callrail-verification"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "call-completed",
              "leftValue": "={{ $json.event }}",
              "rightValue": "call_completed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-call-event",
      "name": "Check Call Event",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract call data from CallRail webhook\nconst callData = $input.first().json;\n\n// Get appointment data from Softr\nconst appointmentId = callData.custom_tracking_number;\nconst callDuration = callData.duration;\nconst customerPhone = callData.customer_phone_number;\nconst callTime = new Date(callData.start_time);\n\n// Check if this call qualifies as a \"show\"\nconst isQualifyingCall = callDuration >= 1200; // 20+ minutes\n\n// Extract keywords from transcript (if available)\nconst transcript = callData.transcript || '';\nconst qualifyingKeywords = [\n  'reverse mortgage',\n  'home equity',\n  'application',\n  'next steps',\n  'paperwork',\n  'documents',\n  'appointment',\n  'meeting'\n];\n\nconst keywordMatches = qualifyingKeywords.filter(keyword => \n  transcript.toLowerCase().includes(keyword.toLowerCase())\n).length;\n\nconst hasQualifyingKeywords = keywordMatches >= 2;\n\n// Calculate confidence score\nlet confidenceScore = 0;\nif (isQualifyingCall) confidenceScore += 0.6;\nif (hasQualifyingKeywords) confidenceScore += 0.3;\nif (callDuration >= 1800) confidenceScore += 0.1; // Bonus for 30+ min calls\n\nconst isVerifiedShow = confidenceScore >= 0.7;\n\nreturn {\n  appointmentId,\n  callDuration,\n  customerPhone,\n  callTime,\n  isQualifyingCall,\n  hasQualifyingKeywords,\n  keywordMatches,\n  confidenceScore,\n  isVerifiedShow,\n  transcript: transcript.substring(0, 500), // Limit transcript length\n  recordingUrl: callData.recording_url,\n  callRailCallId: callData.id\n};"
      },
      "id": "analyze-call-data",
      "name": "Analyze Call Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "verified-show",
              "leftValue": "={{ $json.isVerifiedShow }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-verified-show",
      "name": "Check Verified Show",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "https://api.softr.io/v1/api/apps/{{ $vars.SOFTR_APP_ID }}/tables/appointments/records/{{ $json.appointmentId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "softrApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "show_verified",
              "value": "={{ $json.isVerifiedShow }}"
            },
            {
              "name": "show_verification_date",
              "value": "={{ $now }}"
            },
            {
              "name": "call_duration",
              "value": "={{ $json.callDuration }}"
            },
            {
              "name": "confidence_score",
              "value": "={{ $json.confidenceScore }}"
            },
            {
              "name": "recording_url",
              "value": "={{ $json.recordingUrl }}"
            },
            {
              "name": "callrail_call_id",
              "value": "={{ $json.callRailCallId }}"
            },
            {
              "name": "status",
              "value": "={{ $json.isVerifiedShow ? 'showed' : 'no_show' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "update-appointment-status",
      "name": "Update Appointment Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "show-verified",
              "leftValue": "={{ $json.isVerifiedShow }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-show-bonus",
      "name": "Check Show Bonus",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 100]
    },
    {
      "parameters": {
        "jsCode": "// Calculate broker payment for verified show\nconst appointmentData = $input.first().json;\nconst brokerTier = appointmentData.broker_tier || 'standard';\n\n// Payment structure based on broker tier\nconst paymentStructure = {\n  premium: {\n    booking_fee: 100,\n    show_bonus: 400,\n    total: 500\n  },\n  standard: {\n    booking_fee: 75,\n    show_bonus: 325,\n    total: 400\n  },\n  volume: {\n    booking_fee: 50,\n    show_bonus: 200,\n    total: 250\n  }\n};\n\nconst brokerPayment = paymentStructure[brokerTier];\n\n// Create billing event\nconst billingEvent = {\n  broker_id: appointmentData.broker_id,\n  lead_id: appointmentData.lead_id,\n  appointment_id: appointmentData.appointmentId,\n  event_type: 'show_verified',\n  amount: brokerPayment.show_bonus,\n  description: `Show bonus for verified appointment - ${appointmentData.callDuration}s call`,\n  payment_date: new Date().toISOString(),\n  status: 'pending_payment',\n  metadata: {\n    call_duration: appointmentData.callDuration,\n    confidence_score: appointmentData.confidenceScore,\n    recording_url: appointmentData.recordingUrl,\n    broker_tier: brokerTier\n  }\n};\n\nreturn billingEvent;"
      },
      "id": "calculate-show-bonus",
      "name": "Calculate Show Bonus",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 20]
    },
    {
      "parameters": {
        "url": "https://api.softr.io/v1/api/apps/{{ $vars.SOFTR_APP_ID }}/tables/billing_events/records",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "softrApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "broker_id",
              "value": "={{ $json.broker_id }}"
            },
            {
              "name": "lead_id",
              "value": "={{ $json.lead_id }}"
            },
            {
              "name": "appointment_id",
              "value": "={{ $json.appointment_id }}"
            },
            {
              "name": "event_type",
              "value": "={{ $json.event_type }}"
            },
            {
              "name": "amount",
              "value": "={{ $json.amount }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "payment_date",
              "value": "={{ $json.payment_date }}"
            },
            {
              "name": "status",
              "value": "={{ $json.status }}"
            },
            {
              "name": "metadata",
              "value": "={{ JSON.stringify($json.metadata) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "create-billing-event",
      "name": "Create Billing Event",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 20]
    },
    {
      "parameters": {
        "jsCode": "// Send notification to broker about verified show\nconst billingEvent = $input.first().json;\nconst brokerData = billingEvent.metadata;\n\nconst notification = {\n  to: brokerData.broker_email,\n  subject: \"ðŸŽ‰ Show Verified - Payment Processed\",\n  message: `\n    Hi ${brokerData.broker_name},\n    \n    Great news! Your appointment with ${brokerData.lead_name} has been verified as a show.\n    \n    Call Details:\n    - Duration: ${Math.floor(brokerData.call_duration / 60)} minutes\n    - Confidence Score: ${(brokerData.confidence_score * 100).toFixed(1)}%\n    - Show Bonus: $${billingEvent.amount}\n    \n    Payment will be processed within 24 hours.\n    \n    Keep up the great work!\n    \n    - Equity Connect Team\n  `,\n  broker_id: billingEvent.broker_id,\n  event_type: 'show_verified'\n};\n\nreturn notification;"
      },
      "id": "create-broker-notification",
      "name": "Create Broker Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 20]
    },
    {
      "parameters": {
        "url": "https://api.softr.io/v1/api/apps/{{ $vars.SOFTR_APP_ID }}/tables/notifications/records",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "softrApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "broker_id",
              "value": "={{ $json.broker_id }}"
            },
            {
              "name": "type",
              "value": "={{ $json.event_type }}"
            },
            {
              "name": "title",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "message",
              "value": "={{ $json.message }}"
            },
            {
              "name": "status",
              "value": "unread"
            },
            {
              "name": "created_date",
              "value": "={{ $now }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-broker-notification",
      "name": "Send Broker Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2220, 20]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"Call verification processed\", \"show_verified\": $json.isVerifiedShow, \"confidence_score\": $json.confidenceScore } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2440, 20]
    },
    {
      "parameters": {
        "jsCode": "// Handle no-show case\nconst callData = $input.first().json;\n\n// Create no-show billing event (broker already paid booking fee)\nconst noShowEvent = {\n  appointment_id: callData.appointmentId,\n  event_type: 'no_show',\n  amount: 0, // No additional payment\n  description: `No-show verified - call duration: ${callData.callDuration}s`,\n  status: 'completed',\n  metadata: {\n    call_duration: callData.callDuration,\n    confidence_score: callData.confidenceScore,\n    action: 'mark_for_rework'\n  }\n};\n\nreturn noShowEvent;"
      },
      "id": "handle-no-show",
      "name": "Handle No-Show",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "https://api.softr.io/v1/api/apps/{{ $vars.SOFTR_APP_ID }}/tables/billing_events/records",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "softrApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "appointment_id",
              "value": "={{ $json.appointment_id }}"
            },
            {
              "name": "event_type",
              "value": "={{ $json.event_type }}"
            },
            {
              "name": "amount",
              "value": "={{ $json.amount }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "status",
              "value": "={{ $json.status }}"
            },
            {
              "name": "metadata",
              "value": "={{ JSON.stringify($json.metadata) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "record-no-show",
      "name": "Record No-Show",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"No-show recorded\", \"action\": \"marked_for_rework\" } }}"
      },
      "id": "no-show-response",
      "name": "No-Show Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "webhook-trigger": {
      "main": [
        [
          {
            "node": "check-call-event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-call-event": {
      "main": [
        [
          {
            "node": "analyze-call-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze-call-data": {
      "main": [
        [
          {
            "node": "check-verified-show",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-verified-show": {
      "main": [
        [
          {
            "node": "update-appointment-status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "handle-no-show",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-appointment-status": {
      "main": [
        [
          {
            "node": "check-show-bonus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-show-bonus": {
      "main": [
        [
          {
            "node": "calculate-show-bonus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculate-show-bonus": {
      "main": [
        [
          {
            "node": "create-billing-event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-billing-event": {
      "main": [
        [
          {
            "node": "create-broker-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-broker-notification": {
      "main": [
        [
          {
            "node": "send-broker-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-broker-notification": {
      "main": [
        [
          {
            "node": "webhook-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "handle-no-show": {
      "main": [
        [
          {
            "node": "record-no-show",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "record-no-show": {
      "main": [
        [
          {
            "node": "no-show-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
