{
  "name": "Broker Calendar Management (Unified)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "broker-availability",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [400, 200],
      "id": "webhook-availability",
      "name": "üìÖ Check Availability",
      "webhookId": "broker-availability"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "broker-book-appointment",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [400, 500],
      "id": "webhook-book",
      "name": "üìù Book Appointment",
      "webhookId": "broker-book-appointment"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "broker-cancel-appointment",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [400, 800],
      "id": "webhook-cancel",
      "name": "‚ùå Cancel Appointment",
      "webhookId": "broker-cancel-appointment"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  b.id,\n  b.contact_name,\n  b.company_name,\n  b.timezone,\n  b.calendar_provider,\n  b.google_calendar_id,\n  b.outlook_calendar_id,\n  b.ghl_location_id,\n  b.icloud_calendar_id\nFROM brokers b\nWHERE b.id = '{{ $json.body.broker_id }}'\nLIMIT 1"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [620, 200],
      "id": "get-broker-info",
      "name": "Get Broker Info",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.calendar_provider }}",
              "rightValue": "google",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [840, 200],
      "id": "route-by-provider",
      "name": "Route by Calendar Provider"
    },
    {
      "parameters": {
        "calendar": "={{ $('Get Broker Info').item.json.google_calendar_id }}",
        "operation": "getAll",
        "start": "={{ $('üìÖ Check Availability').item.json.body.date_start }}",
        "end": "={{ $('üìÖ Check Availability').item.json.body.date_end }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [1060, 100],
      "id": "google-calendar-check",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "credential-id",
          "name": "Google Calendar"
        }
      }
    },
    {
      "parameters": {
        "calendar": "={{ $('Get Broker Info').item.json.outlook_calendar_id }}",
        "operation": "getAll",
        "start": "={{ $('üìÖ Check Availability').item.json.body.date_start }}",
        "end": "={{ $('üìÖ Check Availability').item.json.body.date_end }}",
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [1060, 200],
      "id": "outlook-calendar-check",
      "name": "Outlook Calendar",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "credential-id",
          "name": "Microsoft Outlook"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://services.leadconnectorhq.com/calendars/{{ $('Get Broker Info').item.json.ghl_location_id }}/free-slots",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "goHighLevelOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "startDate",
              "value": "={{ $('üìÖ Check Availability').item.json.body.date_start }}"
            },
            {
              "name": "endDate",
              "value": "={{ $('üìÖ Check Availability').item.json.body.date_end }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1060, 300],
      "id": "ghl-calendar-check",
      "name": "GoHighLevel Calendar",
      "credentials": {
        "goHighLevelOAuth2Api": {
          "id": "credential-id",
          "name": "GoHighLevel"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fallback for iCloud or unknown providers\n// Returns generic business hours slots\n\nconst broker = $('Get Broker Info').first().json;\nconst request = $input.first().json.body;\n\nconst slots = [];\nconst businessHours = {\n  morning: ['09:00', '10:00', '11:00'],\n  afternoon: ['14:00', '15:00', '16:00']\n};\n\nfor (let i = 1; i < 14; i++) {\n  const date = new Date();\n  date.setDate(date.getDate() + i);\n  const dayOfWeek = date.getDay();\n  \n  if (dayOfWeek === 0 || dayOfWeek === 6) continue;\n  \n  const times = request.preferred_time === 'morning' \n    ? businessHours.morning \n    : request.preferred_time === 'afternoon' \n    ? businessHours.afternoon \n    : [...businessHours.morning, ...businessHours.afternoon];\n  \n  times.forEach(time => {\n    const [hour, minute] = time.split(':');\n    const slot = new Date(date);\n    slot.setHours(parseInt(hour), parseInt(minute), 0, 0);\n    \n    slots.push({\n      datetime: slot.toISOString(),\n      display: `${slot.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })} at ${time}`,\n      day: slot.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase(),\n      time: time\n    });\n  });\n}\n\nreturn [{\n  json: {\n    success: true,\n    broker_name: broker.contact_name,\n    available_slots: slots.slice(0, 5),\n    provider: broker.calendar_provider || 'fallback'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 400],
      "id": "fallback-slots",
      "name": "Fallback Slots (iCloud/Unknown)"
    },
    {
      "parameters": {
        "jsCode": "// Calculate available slots from calendar busy times\nconst busyEvents = $input.all();\nconst broker = $('Get Broker Info').first().json;\nconst request = $('üìÖ Check Availability').first().json.body;\n\nconst busyTimes = busyEvents.map(item => ({\n  start: new Date(item.json.start?.dateTime || item.json.start?.date || item.json.startDateTime),\n  end: new Date(item.json.end?.dateTime || item.json.end?.date || item.json.endDateTime)\n})).filter(b => b.start && b.end);\n\nconst slots = [];\nconst businessStart = 9;\nconst businessEnd = 17;\n\nfor (let dayOffset = 1; dayOffset < 14; dayOffset++) {\n  const date = new Date();\n  date.setDate(date.getDate() + dayOffset);\n  const dayOfWeek = date.getDay();\n  \n  if (dayOfWeek === 0 || dayOfWeek === 6) continue;\n  \n  for (let hour = businessStart; hour < businessEnd; hour++) {\n    if (request.preferred_time === 'morning' && hour >= 12) continue;\n    if (request.preferred_time === 'afternoon' && hour < 12) continue;\n    \n    const slotStart = new Date(date);\n    slotStart.setHours(hour, 0, 0, 0);\n    const slotEnd = new Date(slotStart);\n    slotEnd.setMinutes(60);\n    \n    const isConflict = busyTimes.some(busy => \n      (slotStart >= busy.start && slotStart < busy.end) ||\n      (slotEnd > busy.start && slotEnd <= busy.end) ||\n      (slotStart <= busy.start && slotEnd >= busy.end)\n    );\n    \n    if (!isConflict) {\n      const dayName = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'][dayOfWeek];\n      if (request.preferred_day && request.preferred_day !== 'any' && request.preferred_day !== dayName) continue;\n      \n      slots.push({\n        datetime: slotStart.toISOString(),\n        display: `${slotStart.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })} at ${slotStart.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}`,\n        day: dayName,\n        time: slotStart.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })\n      });\n    }\n  }\n}\n\nreturn [{\n  json: {\n    success: true,\n    broker_name: broker.contact_name,\n    available_slots: slots.slice(0, 5),\n    total_available: slots.length,\n    provider: broker.calendar_provider\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1280, 200],
      "id": "format-slots",
      "name": "Format Available Slots"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1500, 200],
      "id": "respond-availability",
      "name": "Respond"
    }
  ],
  "connections": {
    "üìÖ Check Availability": {
      "main": [[{ "node": "Get Broker Info", "type": "main", "index": 0 }]]
    },
    "Get Broker Info": {
      "main": [[{ "node": "Route by Calendar Provider", "type": "main", "index": 0 }]]
    },
    "Route by Calendar Provider": {
      "main": [
        [{ "node": "Google Calendar", "type": "main", "index": 0 }],
        [{ "node": "Outlook Calendar", "type": "main", "index": 0 }],
        [{ "node": "GoHighLevel Calendar", "type": "main", "index": 0 }],
        [{ "node": "Fallback Slots (iCloud/Unknown)", "type": "main", "index": 0 }]
      ]
    },
    "Google Calendar": {
      "main": [[{ "node": "Format Available Slots", "type": "main", "index": 0 }]]
    },
    "Outlook Calendar": {
      "main": [[{ "node": "Format Available Slots", "type": "main", "index": 0 }]]
    },
    "GoHighLevel Calendar": {
      "main": [[{ "node": "Format Available Slots", "type": "main", "index": 0 }]]
    },
    "Fallback Slots (iCloud/Unknown)": {
      "main": [[{ "node": "Respond", "type": "main", "index": 0 }]]
    },
    "Format Available Slots": {
      "main": [[{ "node": "Respond", "type": "main", "index": 0 }]]
    }
  }
}

