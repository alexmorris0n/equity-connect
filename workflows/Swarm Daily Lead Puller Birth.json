{
    "nodes": [
      {
        "parameters": {
          "promptType": "define",
          "text": "=Broker Context:\n- Broker ID: {{ $json.broker_id }}\n- Broker Name: {{ $json.broker_name }}\n- PropertyRadar List: {{ $json.list_id }}\n- Current Offset: {{ $json.current_offset }}\n- Daily Capacity: {{ $json.daily_capacity }}\n- Daily Lead Surplus: {{ $json.daily_lead_surplus }}\n\n---\n\n## STEP 1: Count Today's Enriched Leads\nCall Supabase execute_sql:\n```\nSELECT count_enriched_today('{{ $json.broker_id }}')\n```\nStore result as: current_count\n\n## STEP 2: Determine Pull Requirement\nStep 2a: Call calculator: `{{ $json.daily_capacity }} - current_count - {{ $json.daily_lead_surplus }}`\nStore as: needed_leads\n\nStep 2b: If needed_leads <= 0, output empty array and STOP:\n```json\n{\n  \"properties_for_swarm\": [],\n  \"pull_quantity\": 0,\n  \"needed_leads\": needed_leads,\n  \"message\": \"No leads needed today - surplus covers target\"\n}\n```\n\nStep 2c: If needed_leads > 0:\n- Call calculator: `needed_leads / 0.8`\n- Round UP to integer\n- Store as: pull_quantity\n\n## STEP 3: Pull Properties\nCall PropertyRadar:\n```json\n{\n  \"pr_method\": \"GET\",\n  \"pr_endpoint\": \"/lists/{{ $json.list_id }}/items?Start={{ $json.current_offset }}&Limit=${pull_quantity}\",\n  \"pr_body_json\": \"{}\"\n}\n```\nStore: radar_ids\n\n## STEP 4: Filter New IDs\nCall Supabase execute_sql:\n```\nSELECT * FROM filter_new_radar_ids(ARRAY['${radar_ids.join(\"','\")}'])\n```\nIf 0 results, output empty array and STOP\nStore: new_radar_ids\n\n## STEP 5: Purchase Properties\nCall PropertyRadar:\n```json\n{\n  \"pr_method\": \"POST\",\n  \"pr_endpoint\": \"/properties?Purchase=1\",\n  \"pr_body_json\": \"{\\\"Criteria\\\":[{\\\"name\\\":\\\"RadarID\\\",\\\"value\\\":[\\\"${new_radar_ids.join('\\\",\\\"')}\\\"]}]}\"\n}\n```\nStore: properties\n\n## STEP 6: Output Properties Array with Campaign Assignment\nCRITICAL: You MUST complete this step and output the JSON structure below.\n\nFor EACH property in the properties array, create an object with:\n- radar_id: property.RadarID\n- first_name: property.FirstName\n- last_name: property.LastName\n- street: property.Address\n- city: property.City\n- state: property.State\n- zip: property.ZipFive\n- property_value: property.AVM (as string)\n- estimated_equity: property.EstimatedEquity (as string)\n- equity_percent: Calculate (EstimatedEquity / AVM * 100) as string with 2 decimals\n- campaign_id: Assign based on equity_percent:\n  - If equity_percent < 50: \"75f3bbfd-17cb-4e28-b28a-975eb6959948\"\n  - If equity_percent 50-79: \"758cb5cc-1857-4ec0-8e39-7eacc1eb3df1\"\n  - If equity_percent >= 80: \"b7912eeb-ec29-4d33-807c-555128abfdf2\"\n\nOutput this JSON structure:\n```json\n{\n  \"properties_for_swarm\": [\n    {\n      \"radar_id\": \"P123456\",\n      \"first_name\": \"John\",\n      \"last_name\": \"Smith\",\n      \"street\": \"123 Main St\",\n      \"city\": \"Los Angeles\",\n      \"state\": \"CA\",\n      \"zip\": \"90210\",\n      \"property_value\": \"550000\",\n      \"estimated_equity\": \"250000\",\n      \"equity_percent\": \"45.45\",\n      \"campaign_id\": \"75f3bbfd-17cb-4e28-b28a-975eb6959948\"\n    }\n  ],\n  \"pull_quantity\": 2,\n  \"needed_leads\": 2,\n  \"properties_count\": 1,\n  \"message\": \"Properties ready for SwarmTrace enrichment\"\n}\n```\n\nBEGIN EXECUTION AT STEP 1\n",
          "options": {
            "maxIterations": 20,
            "returnIntermediateSteps": true
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2.2,
        "position": [
          144,
          624
        ],
        "id": "2a175ab2-a490-4030-b3bb-9561419c23d8",
        "name": "ü§ñ AI Controller"
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          1600,
          352
        ],
        "id": "9629edcc-186a-46fc-a54c-ce356af68f47",
        "name": "‚úÖ Broker Complete"
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.errorTrigger",
        "typeVersion": 1,
        "position": [
          16,
          400
        ],
        "id": "83327172-a728-4b08-8070-296429c5ec5c",
        "name": "Error Trigger"
      },
      {
        "parameters": {
          "jsCode": "const error = $input.first().json;\n\n// Safely try to get broker context - it might not have executed\nlet broker = {\n  broker_name: 'Unknown',\n  broker_id: 'unknown',\n  daily_capacity: 0,\n  daily_lead_surplus: 0\n};\n\ntry {\n  const brokerContext = $('Prepare Broker Context').all()[0]?.json;\n  if (brokerContext) {\n    broker = brokerContext;\n  }\n} catch (e) {\n  // Broker context node hasn't executed - use defaults\n  console.log('Prepare Broker Context not executed, using defaults');\n}\n\nconst executionTime = new Date().toLocaleTimeString('en-US', { \n  timeZone: 'America/Los_Angeles',\n  hour: '2-digit', \n  minute: '2-digit',\n  hour12: false\n});\n\n// Try to get any partial results from Parse Results if it ran\nlet parseResults = null;\ntry {\n  parseResults = $('üìä Aggregate Loop Results').all()[0]?.json;\n} catch (e) {\n  // Parse Results hasn't executed\n}\n\nconst leadsCompletedBeforeError = parseResults?.leads_enriched || 0;\nconst shortfall = broker.daily_capacity - broker.daily_lead_surplus - leadsCompletedBeforeError;\n\nconst errorMessage = `üö® *Workflow Failed - ${broker.broker_name}*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ö†Ô∏è *Error:*\n   ‚Ä¢ ${error.message}\nüìç *Failed Node:*\n   ‚Ä¢ ${error.node?.name || 'Unknown'}\n---------------------------\nüèÅ *Starting Surplus:*\n   ‚Ä¢ ${broker.daily_lead_surplus} leads\nüéØ *Target:*\n   ‚Ä¢ ${broker.daily_capacity} leads\n‚úÖ *Completed Before Error:*\n   ‚Ä¢ ${leadsCompletedBeforeError} leads\nüìâ *Shortfall:*\n   ‚Ä¢ ${shortfall > 0 ? shortfall : 0} leads short\n‚è±Ô∏è *Time:*\n   ‚Ä¢ ${executionTime} PST`;\n\nconsole.error('---------------------------');\nconsole.error('‚ùå AI CONTROLLER ERROR');\nconsole.error(`Broker: ${broker.broker_name}`);\nconsole.error(`Error: ${error.message}`);\nconsole.error(`Shortfall: ${shortfall} leads`);\nconsole.error('---------------------------');\n\nreturn [{\n  json: {\n    error: true,\n    broker_id: broker.broker_id,\n    broker_name: broker.broker_name,\n    error_message: error.message,\n    timestamp: new Date().toISOString(),\n    slack_message: errorMessage\n  }\n}];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          224,
          400
        ],
        "id": "bec55279-be1d-4804-b560-4b1cdb3a4818",
        "name": "‚ùå Log Error"
      },
      {
        "parameters": {
          "endpointUrl": "https://mcp.supabase.com/mcp?project_ref=mxnqfwuhvurajrgoefyg",
          "authentication": "headerAuth",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
        "typeVersion": 1.2,
        "position": [
          112,
          848
        ],
        "id": "6c7ef1e3-93f9-44dc-8ed0-03573771c6db",
        "name": "üíæ Supabase MCP1",
        "credentials": {
          "httpHeaderAuth": {
            "id": "uDlSOCPkKkn2ug5S",
            "name": "SupaBase MCP"
          }
        },
        "notes": "SQL functions ready: count_enriched_today(), filter_new_radar_ids(), update_broker_offset()"
      },
      {
        "parameters": {
          "toolDescription": "PropertyRadar API. Pass THREE string parameters: 'pr_method' (GET or POST), 'pr_endpoint' (path like /lists/1104847/items?Start=0&Limit=5), 'pr_body_json' (JSON string of body, use \"{}\" for GET). Examples: List items: pr_method=\"GET\", pr_endpoint=\"/lists/1104847/items?Start=703&Limit=30\", pr_body_json=\"{}\". Buy properties: pr_method=\"POST\", pr_endpoint=\"/properties?Purchase=1\", pr_body_json=\"{\\\"Criteria\\\":[{\\\"name\\\":\\\"RadarID\\\",\\\"value\\\":[\\\"P123\\\"]}]}\". CRITICAL: Query params go IN endpoint URL, not body.",
          "method": "={{ $fromAI('pr_method', 'GET') }}",
          "url": "={{ 'https://api.propertyradar.com/v1' + ($fromAI('pr_endpoint', '/properties')) }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "httpBearerAuth",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={{ JSON.parse($fromAI('pr_body_json', '{}')) }}",
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequestTool",
        "typeVersion": 4.2,
        "position": [
          400,
          848
        ],
        "id": "d7484155-f6da-4e84-bd4c-a322768cf92b",
        "name": "üèòÔ∏è PropertyRadar1",
        "credentials": {
          "httpBearerAuth": {
            "id": "81i7WbQilIMSh4E3",
            "name": "PropertyRadar"
          }
        }
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "select": "channel",
          "channelId": {
            "__rl": true,
            "value": "C09FJL00SB0",
            "mode": "list",
            "cachedResultName": "n8n-erros"
          },
          "text": "={{ $json.slack_message }}",
          "otherOptions": {}
        },
        "type": "n8n-nodes-base.slack",
        "typeVersion": 2.3,
        "position": [
          416,
          400
        ],
        "id": "263d5ba3-f610-43ad-9ab6-47de919dada9",
        "name": "Send a message",
        "webhookId": "d18f5bcd-07df-4133-902f-e3237c27333b",
        "credentials": {
          "slackOAuth2Api": {
            "id": "PRCtEXCO4z0rjk0n",
            "name": "Slack account"
          }
        }
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "select": "channel",
          "channelId": {
            "__rl": true,
            "value": "C09FJL00SB0",
            "mode": "list",
            "cachedResultName": "n8n-erros"
          },
          "text": "=üëî*{{ $json.broker_name }}* \n   ‚Ä¢ {{ $json.execution_time }}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüèÅ *STARTING SURPLUS:*\n   ‚Ä¢ {{ $json.starting_surplus }} leads\nüìã *TODAY'S TARGET:*\n   ‚Ä¢ {{ $json.target }} leads\n---------------------------\n‚öôÔ∏è *TODAY'S ACTIVITY:*\n   ‚Ä¢ {{ $json.leads_pulled }} pulled \n   ‚Ä¢ {{ $json.leads_enriched }} enriched\n   ‚Ä¢ {{ $json.leads_uploaded }} uploaded \nü™ô *COST:*\n   ‚Ä¢ {{ $json.token_usage }} tokens\n   ‚Ä¢ {{ $json.cost.toFixed(6) }}($)\n---------------------------\n‚úÖ *TOTAL TODAY:*\n   ‚Ä¢ {{ $json.leads_enriched }} enriched\n   ‚Ä¢ {{ $json.leads_uploaded }} uploaded\nüíº *ENDING SURPLUS:*\n   ‚Ä¢ {{ $json.ending_surplus }} leads",
          "otherOptions": {}
        },
        "type": "n8n-nodes-base.slack",
        "typeVersion": 2.3,
        "position": [
          1408,
          352
        ],
        "id": "5fc96350-0466-49cc-90bb-adfb038b46f3",
        "name": "üì© Per-Broker Success",
        "webhookId": "46e593a8-9bc0-482d-974d-e2f1f26b61ad",
        "credentials": {
          "slackOAuth2Api": {
            "id": "PRCtEXCO4z0rjk0n",
            "name": "Slack account"
          }
        }
      },
      {
        "parameters": {},
        "type": "@n8n/n8n-nodes-langchain.toolCalculator",
        "typeVersion": 1,
        "position": [
          240,
          848
        ],
        "id": "46fa1080-083f-44e5-a14a-c11283fa64a4",
        "name": "Calculator"
      },
      {
        "parameters": {
          "model": "google/gemini-2.5-flash",
          "options": {
            "temperature": 0
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
        "typeVersion": 1,
        "position": [
          0,
          848
        ],
        "id": "7b8a9963-04b3-46a6-9dfc-c7e351a6680d",
        "name": "Gemini 2.5 Flash x",
        "credentials": {
          "openRouterApi": {
            "id": "5pEBmsekpDy6GZN0",
            "name": "OpenRouter n8n"
          }
        }
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 3,
        "position": [
          640,
          624
        ],
        "id": "743a7a2e-f400-4c5d-bdeb-0ef38ce0c0f4",
        "name": "Loop Over Items"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://skiptracepublicapi.swarmanalytics.com/skiptrace",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "X-API-KEY",
                "value": "bf3af9cb-f76e-4282-9688-1bff4beb7298"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"property_address\": \"{{ $json.street }}\",\n  \"property_city\": \"{{ $json.city }}\",\n  \"property_state\": \"{{ $json.state }}\",\n  \"property_zip\": \"{{ $json.zip }}\",\n  \"firstname\": \"{{ $json.first_name || '' }}\",\n  \"lastname\": \"{{ $json.last_name || '' }}\"\n}",
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          864,
          720
        ],
        "id": "e2494f3e-d397-4e10-9f8d-c25d8b8a7580",
        "name": "Swarm"
      },
      {
        "parameters": {
          "workflowId": {
            "__rl": true,
            "value": "8fHbVBYRzBHbwMyM",
            "mode": "list",
            "cachedResultUrl": "/workflow/8fHbVBYRzBHbwMyM",
            "cachedResultName": "01 AI Daily Lead Puller Swarm Spawn"
          },
          "workflowInputs": {
            "mappingMode": "defineBelow",
            "value": {},
            "matchingColumns": [],
            "schema": [],
            "attemptToConvertTypes": false,
            "convertFieldsToString": true
          },
          "mode": "each",
          "options": {
            "waitForSubWorkflow": true
          }
        },
        "type": "n8n-nodes-base.executeWorkflow",
        "typeVersion": 1.3,
        "position": [
          -256,
          624
        ],
        "id": "fefe501d-84eb-4255-907d-b4dad135eb5b",
        "name": "Trigger from Spawn"
      },
      {
        "parameters": {
          "amount": 0.1
        },
        "type": "n8n-nodes-base.wait",
        "typeVersion": 1.1,
        "position": [
          1072,
          720
        ],
        "id": "2c67aadf-0918-4f42-a60b-afcaf8eb6188",
        "name": "Wait",
        "webhookId": "2f253dfd-52c3-4cb3-b797-4dcd66ba8983"
      },
      {
        "parameters": {
          "jsCode": "// Check if SwarmTrace enrichment succeeded\nconst swarmResponse = $input.first().json;\nconst originalProperty = $('Loop Over Items').first().json; // Get original property data from loop\n\n// Merge SwarmTrace response with original property data (including campaign_id from AI Controller)\nconst mergedData = {\n  ...originalProperty, // Includes campaign_id, radar_id, property data, etc.\n  ...swarmResponse,    // Adds SwarmTrace enrichment data (emails, phones, etc.)\n};\n\n// Check if we got a valid primary email from SwarmTrace\nconst hasEmail = swarmResponse.primary_email &&\n                 swarmResponse.primary_email.trim().length > 0 &&\n                 swarmResponse.primary_email.includes('@');\n\n// Mark enrichment status\nmergedData.swarm_enriched = hasEmail;\nmergedData.swarm_failed = !hasEmail;\n\n// Log for debugging\nif (hasEmail) {\n  console.log(`‚úÖ SwarmTrace SUCCESS: ${originalProperty.street} - Email: ${swarmResponse.primary_email}`);\n} else {\n  console.log(`‚ùå SwarmTrace FAILED: ${originalProperty.street} - No valid email returned`);\n}\n\nreturn { json: mergedData };"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1152,
          720
        ],
        "id": "check-swarm-success-node",
        "name": "Check Swarm Success"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.instantly.ai/api/v2/leads/add",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "instantlyApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"leads\": [\n    {\n      \"email\": \"{{ $json.primary_email }}\",\n      \"first_name\": \"{{ $json.first_name }}\",\n      \"last_name\": \"{{ $json.last_name }}\",\n      \"custom_variables\": {\n        \"property_address\": \"{{ $json.street }}\",\n        \"property_city\": \"{{ $json.city }}\",\n        \"property_value\": \"{{ $json.property_value }}\",\n        \"estimated_equity\": \"{{ $json.estimated_equity }}\",\n        \"equity_percent\": \"{{ $json.equity_percent }}\",\n        \"broker_name\": \"{{ $json.broker_name }}\",\n        \"broker_nmls\": \"{{ $json.broker_nmls }}\"\n      }\n    }\n  ],\n  \"campaign_id\": \"{{ $json.campaign_id }}\",\n  \"skip_if_in_campaign\": true,\n  \"verify_leads_on_import\": false\n}",
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          1280,
          720
        ],
        "id": "49875e04-1ae9-4eed-9c91-9c6eaf686ba6",
        "name": "Instantly",
        "credentials": {
          "instantlyApi": {
            "id": "TSGbMOFEJY9CmhHW",
            "name": "Instantly account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Check if Instantly upload succeeded\nconst instantlyResponse = $input.first().json;\nconst uploadSuccess = instantlyResponse.status === 'success' || instantlyResponse.statusCode === 200;\n\nreturn {\n  json: {\n    ...($input.first().json), // Keep all data including swarm_enriched\n    instantly_uploaded: uploadSuccess,\n    instantly_failed: !uploadSuccess\n  }\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1376,
          720
        ],
        "id": "check-instantly-success-node",
        "name": "Check Instantly Success"
      },
      {
        "parameters": {
          "jsCode": "const aiOutput = $('ü§ñ AI Controller').first().json;\nconst context = $('Prepare Broker Context').first().json;\nconst loopResults = $input.all(); // All items from loop\n\n// Count SwarmTrace results\nlet swarmSuccess = 0;\nlet swarmFailed = 0;\nlet instantlySuccess = 0;\nlet instantlyFailed = 0;\n\nloopResults.forEach(item => {\n  if (item.json.swarm_enriched) swarmSuccess++;\n  else swarmFailed++;\n  \n  if (item.json.instantly_uploaded) instantlySuccess++;\n  else instantlyFailed++;\n});\n\n// Parse AI output\nconst propertiesPulled = aiOutput.properties_count || 0;\nconst neededLeads = aiOutput.needed_leads || 0;\nconst pullQuantity = aiOutput.pull_quantity || 0;\n\n// Token usage from AI\nlet totalInputTokens = 0;\nlet totalOutputTokens = 0;\n\nif (aiOutput.intermediateSteps && Array.isArray(aiOutput.intermediateSteps)) {\n  aiOutput.intermediateSteps.forEach(step => {\n    const messageLog = step.action?.messageLog;\n    if (messageLog && Array.isArray(messageLog)) {\n      messageLog.forEach(msg => {\n        if (msg.kwargs?.usage_metadata) {\n          const usage = msg.kwargs.usage_metadata;\n          totalInputTokens += usage.input_tokens || 0;\n          totalOutputTokens += usage.output_tokens || 0;\n        }\n      });\n    }\n  });\n}\n\nconst cost = (totalInputTokens * 0.0000003) + (totalOutputTokens * 0.0000025);\n\n// Calculate final surplus\nconst startingSurplus = context.daily_lead_surplus || 0;\nconst endingSurplus = startingSurplus + instantlySuccess - 100;\n\nreturn [{\n  json: {\n    success: instantlySuccess > 0,\n    error: swarmFailed === loopResults.length,\n    error_message: swarmFailed === loopResults.length ? 'All SwarmTrace enrichments failed' : null,\n    broker_id: context.broker_id,\n    broker_name: context.broker_name,\n    target: 100,\n    starting_surplus: startingSurplus,\n    ending_surplus: endingSurplus,\n    needed_leads: neededLeads,\n    leads_pulled: propertiesPulled,\n    leads_enriched: swarmSuccess,\n    leads_uploaded: instantlySuccess,\n    swarm_success_rate: ((swarmSuccess / loopResults.length) * 100).toFixed(1) + '%',\n    instantly_success_rate: ((instantlySuccess / loopResults.length) * 100).toFixed(1) + '%',\n    steps_executed: aiOutput.intermediateSteps?.length || 0,\n    token_usage: totalInputTokens + totalOutputTokens,\n    input_tokens: totalInputTokens,\n    output_tokens: totalOutputTokens,\n    cost: cost.toFixed(6),\n    completed_at: new Date().toISOString()\n  }\n}];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          864,
          544
        ],
        "id": "afd9fe1e-7236-48ff-85a4-86305839d56a",
        "name": "üìä Aggregate Loop Results"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "# RECORD RESULTS PROMPT - Database Recording Agent\n\nYou are a data recording agent that records daily lead pull results to the lead_pull_results table in Supabase.\n\n## YOUR ROLE\n- Record daily lead pull results for analytics and surplus tracking\n- Insert data into the lead_pull_results table\n- Handle conflicts with ON CONFLICT DO UPDATE\n\n## INPUT DATA\nYou will receive JSON data containing:\n- run_id: Execution ID\n- broker_id: Broker identifier\n- broker_name: Broker company name\n- success: Boolean success status\n- leads_pulled: Number of properties pulled from PropertyRadar\n- leads_enriched: Number of leads successfully enriched by SwarmTrace\n- leads_uploaded: Number of leads uploaded to Instantly\n- starting_surplus: Surplus from previous day\n- ending_surplus: Calculated ending surplus\n- swarm_success_rate: Percentage of successful SwarmTrace enrichments\n- instantly_success_rate: Percentage of successful Instantly uploads\n- token_usage: Total tokens consumed\n- cost: Total cost in dollars\n- error_message: Any error message (if applicable)\n\n## CALCULATIONS TO PERFORM\nBefore recording, calculate these additional metrics:\n\n1. **Execution Duration**: Calculate total execution time\n2. **Surplus Change**: Calculate difference between ending and starting surplus\n3. **Cost Per Lead**: Calculate cost divided by leads uploaded (if > 0)\n4. **Enrichment Efficiency**: Calculate leads_enriched / leads_pulled percentage\n5. **Upload Efficiency**: Calculate leads_uploaded / leads_enriched percentage\n\n## STEP 1: Perform Calculations\nUse Calculator tool to calculate additional metrics:\n\n1. **Surplus Change**: `{{ $json.ending_surplus }} - {{ $json.starting_surplus }}`\n2. **Cost Per Lead**: `{{ $json.cost }} / {{ $json.leads_uploaded }}` (if leads_uploaded > 0, otherwise 0)\n3. **Enrichment Efficiency**: `({{ $json.leads_enriched }} / {{ $json.leads_pulled }}) * 100` (if leads_pulled > 0, otherwise 0)\n4. **Upload Efficiency**: `({{ $json.leads_uploaded }} / {{ $json.leads_enriched }}) * 100` (if leads_enriched > 0, otherwise 0)\n\nStore results as: surplus_change, cost_per_lead, enrichment_efficiency, upload_efficiency\n\n## STEP 2: Record Results to Database\nCall Supabase MCP execute_sql with this INSERT statement:\n\n```sql\nINSERT INTO lead_pull_results (\n  run_id, \n  broker_id, \n  broker_name, \n  success,\n  leads_pulled, \n  leads_enriched, \n  leads_uploaded,\n  starting_surplus, \n  ending_surplus, \n  swarm_success_rate,\n  instantly_success_rate, \n  token_usage, \n  cost,\n  started_at, \n  finished_at, \n  error_message\n) VALUES (\n  '{{ $json.run_id || $execution.id }}',\n  '{{ $json.broker_id }}',\n  '{{ $json.broker_name }}',\n  {{ $json.success }},\n  {{ $json.leads_pulled }},\n  {{ $json.leads_enriched }},\n  {{ $json.leads_uploaded }},\n  {{ $json.starting_surplus }},\n  {{ $json.ending_surplus }},\n  '{{ $json.swarm_success_rate }}',\n  '{{ $json.instantly_success_rate }}',\n  {{ $json.token_usage }},\n  {{ $json.cost }},\n  NOW() - INTERVAL '{{ $json.execution_time_seconds || 0 }} seconds',\n  NOW(),\n  {{ $json.error_message ? \"'\" + $json.error_message + \"'\" : \"NULL\" }}\n)\nON CONFLICT (run_id, broker_id) DO UPDATE SET\n  success = EXCLUDED.success,\n  leads_uploaded = EXCLUDED.leads_uploaded,\n  ending_surplus = EXCLUDED.ending_surplus,\n  finished_at = EXCLUDED.finished_at;\n```\n\n## STEP 3: Confirm Recording\nAfter successful insertion, output confirmation with calculated metrics:\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Daily lead pull results recorded successfully\",\n  \"broker_id\": \"{{ $json.broker_id }}\",\n  \"broker_name\": \"{{ $json.broker_name }}\",\n  \"leads_uploaded\": \"{{ $json.leads_uploaded }}\",\n  \"ending_surplus\": \"{{ $json.ending_surplus }}\",\n  \"surplus_change\": \"{{ surplus_change }}\",\n  \"cost_per_lead\": \"{{ cost_per_lead.toFixed(4) }}\",\n  \"enrichment_efficiency\": \"{{ enrichment_efficiency.toFixed(1) }}%\",\n  \"upload_efficiency\": \"{{ upload_efficiency.toFixed(1) }}%\"\n}\n```\n\n## ERROR HANDLING\n- If database insertion fails, output error message\n- If any required fields are missing, output error with missing field names\n- Always attempt to record even if some data is incomplete\n\n## IMPORTANT NOTES\n- Use ON CONFLICT to handle duplicate runs safely\n- Calculate started_at by subtracting execution time from NOW()\n- Set finished_at to current timestamp\n- Handle NULL values properly for optional fields\n\nBEGIN EXECUTION AT STEP 1\n",
          "options": {
            "maxIterations": 10,
            "returnIntermediateSteps": false
          }
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2.2,
        "position": [
          1056,
          352
        ],
        "id": "de9f2085-d5ec-4c7a-90aa-64a413053ccf",
        "name": "AI Agent"
      },
      {
        "parameters": {
          "model": "google/gemini-2.5-flash",
          "options": {
            "temperature": 0
          }
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
        "typeVersion": 1,
        "position": [
          1056,
          528
        ],
        "id": "563f65a1-9a0c-422b-8ab8-040b90591a12",
        "name": "Gemini 2.5 Flash x1",
        "credentials": {
          "openRouterApi": {
            "id": "5pEBmsekpDy6GZN0",
            "name": "OpenRouter n8n"
          }
        }
      },
      {
        "parameters": {
          "endpointUrl": "https://mcp.supabase.com/mcp?project_ref=mxnqfwuhvurajrgoefyg",
          "authentication": "headerAuth",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
        "typeVersion": 1.2,
        "position": [
          1296,
          528
        ],
        "id": "ac3509a1-707a-48e9-9a39-b3695abb5cbf",
        "name": "üíæ Supabase MCP",
        "credentials": {
          "httpHeaderAuth": {
            "id": "uDlSOCPkKkn2ug5S",
            "name": "SupaBase MCP"
          }
        },
        "notes": "SQL functions ready: count_enriched_today(), filter_new_radar_ids(), update_broker_offset()"
      },
      {
        "parameters": {},
        "type": "@n8n/n8n-nodes-langchain.toolCalculator",
        "typeVersion": 1,
        "position": [
          1184,
          528
        ],
        "id": "d8b90810-24e1-4a81-8f6c-3e5f71bfa25a",
        "name": "Calculator1"
      },
      {
        "parameters": {
          "jsCode": "// Prepare broker context for AI agent\nconst inputData = $input.first().json;\n\nconsole.log('üîç DEBUG: Raw input data:', JSON.stringify(inputData, null, 2));\n\n// Handle if input is an array (from Execute Workflow trigger) or single object\nconst broker = Array.isArray(inputData) ? inputData[0] : inputData;\n\nconsole.log('üîç DEBUG: Broker data:', JSON.stringify(broker, null, 2));\n\nif (!broker.propertyradar_list_id) {\n  throw new Error(`Broker ${broker.company_name} missing propertyradar_list_id. Create list in PropertyRadar first.`);\n}\n\nconst context = {\n  broker_id: broker.id,\n  broker_name: broker.company_name,\n  broker_contact_name: broker.contact_name || broker.company_name,\n  broker_nmls: broker.nmls_number || '',\n  list_id: broker.propertyradar_list_id,\n  current_offset: broker.propertyradar_offset || 0,\n  daily_capacity: broker.daily_lead_capacity || 250,\n  daily_lead_surplus: broker.daily_lead_surplus || 0,\n  execution_id: $execution.id,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');\nconsole.log(`üöÄ Starting AI Workflow`);\nconsole.log(`Broker: ${context.broker_name}`);\nconsole.log(`Target: ${context.daily_capacity} enriched leads`);\nconsole.log(`Surplus from yesterday: ${context.daily_lead_surplus}`);\nconsole.log(`Adjusted target: ${Math.max(context.daily_capacity - context.daily_lead_surplus, 0)}`);\nconsole.log(`Current Offset: ${context.current_offset}`);\nconsole.log(`List ID: ${context.list_id}`);\nconsole.log(`Execution: ${context.execution_id}`);\nconsole.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');\n\nconsole.log('üîç DEBUG: Final context:', JSON.stringify(context, null, 2));\n\nreturn [{ json: context }];"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -48,
          624
        ],
        "id": "80068b2f-bf23-405f-99a7-d39f1c9874c7",
        "name": "Prepare Broker Context"
      }
    ],
    "connections": {
      "ü§ñ AI Controller": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "‚úÖ Broker Complete": {
        "main": [
          []
        ]
      },
      "Error Trigger": {
        "main": [
          [
            {
              "node": "‚ùå Log Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "‚ùå Log Error": {
        "main": [
          [
            {
              "node": "Send a message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "üíæ Supabase MCP1": {
        "ai_tool": [
          [
            {
              "node": "ü§ñ AI Controller",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "üèòÔ∏è PropertyRadar1": {
        "ai_tool": [
          [
            {
              "node": "ü§ñ AI Controller",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "üì© Per-Broker Success": {
        "main": [
          [
            {
              "node": "‚úÖ Broker Complete",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Calculator": {
        "ai_tool": [
          [
            {
              "node": "ü§ñ AI Controller",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Gemini 2.5 Flash x": {
        "ai_languageModel": [
          [
            {
              "node": "ü§ñ AI Controller",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [
            {
              "node": "üìä Aggregate Loop Results",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Swarm",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Swarm": {
        "main": [
          [
            {
              "node": "Wait",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Trigger from Spawn": {
        "main": [
          [
            {
              "node": "Prepare Broker Context",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait": {
        "main": [
          [
            {
              "node": "Check Swarm Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Swarm Success": {
        "main": [
          [
            {
              "node": "Instantly",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Instantly": {
        "main": [
          [
            {
              "node": "Check Instantly Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Instantly Success": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "üìä Aggregate Loop Results": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          [
            {
              "node": "üì© Per-Broker Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Gemini 2.5 Flash x1": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "üíæ Supabase MCP": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Calculator1": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Broker Context": {
        "main": [
          [
            {
              "node": "ü§ñ AI Controller",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {
      "Error Trigger": [
        {
          "execution": {
            "id": 231,
            "url": "https://n8n.instaroute.com:5678/execution/workflow/1/231",
            "retryOf": "34",
            "error": {
              "message": "Example Error Message",
              "stack": "Stacktrace"
            },
            "lastNodeExecuted": "Node With Error",
            "mode": "manual"
          },
          "workflow": {
            "id": "1",
            "name": "Example Workflow"
          }
        }
      ]
    },
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "4ca45576dabef27a95f92525a5f6415fb3e8061f7037b2ec7fb4ba1bb1cb56c0"
    }
  }