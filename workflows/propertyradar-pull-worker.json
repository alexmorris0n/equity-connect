{
  "name": "PropertyRadar Pull Worker (Production)",
  "meta": {
    "version": "1.0-propertyradar",
    "created": "2025-10-10",
    "description": "Daily lead pulling from PropertyRadar API with multi-broker support, ZIP rotation, and stop-when-known deduplication"
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "days",
              "daysInterval": 1,
              "triggerAtHour": 6
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Daily Trigger (6am)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [100, 300]
    },
    {
      "parameters": {
        "jsCode": "// Initialize daily pull session\nconst sessionId = require('crypto').randomBytes(16).toString('hex');\n\nconsole.log('=================================');\nconsole.log('PropertyRadar Daily Pull Started');\nconsole.log(`Session ID: ${sessionId}`);\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    started_at: new Date().toISOString(),\n    source: 'propertyradar'\n  }\n}];"
      },
      "id": "init-session",
      "name": "Initialize Session",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, company_name, daily_lead_capacity FROM brokers WHERE status = 'active' ORDER BY company_name",
        "options": {}
      },
      "id": "fetch-brokers",
      "name": "Fetch Active Brokers",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [500, 300],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "loop-brokers",
      "name": "Loop Through Brokers",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [700, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract broker info and initialize pull tracking\nconst broker = $input.first().json;\nconst sessionId = $('Initialize Session').first().json.session_id;\n\nconsole.log(`\\n--- Processing Broker: ${broker.company_name} ---`);\nconsole.log(`Daily Lead Capacity: ${broker.daily_lead_capacity}`);\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    broker_id: broker.id,\n    broker_name: broker.company_name,\n    daily_target: broker.daily_lead_capacity || 250,\n    leads_pulled_today: 0,\n    source: 'propertyradar'\n  }\n}];"
      },
      "id": "init-broker-pull",
      "name": "Init Broker Pull",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT upsert_broker_daily_stat(\n  p_broker_id := '{{ $json.broker_id }}'::uuid,\n  p_session_id := '{{ $json.session_id }}',\n  p_status := 'in_progress'\n) as stat_id",
        "options": {}
      },
      "id": "init-daily-stat",
      "name": "Initialize Daily Stat",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [900, 450],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT id, broker_id, market_name, zip_code, priority \nFROM broker_territories \nWHERE broker_id = '{{ $json.broker_id }}' \n  AND active = true \nORDER BY priority DESC, zip_code",
        "options": {}
      },
      "id": "fetch-territories",
      "name": "Fetch Broker Territories",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1100, 300],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "loop-zips",
      "name": "Loop Through ZIPs",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "jsCode": "// Get current ZIP and check if we've hit daily target\nconst territory = $input.first().json;\nconst brokerState = $('Init Broker Pull').first().json;\n\n// Check if we've already hit target\nif (brokerState.leads_pulled_today >= brokerState.daily_target) {\n  console.log(`Target reached: ${brokerState.leads_pulled_today}/${brokerState.daily_target}`);\n  return [{\n    json: {\n      ...brokerState,\n      skip_remaining: true,\n      reason: 'daily_target_reached'\n    }\n  }];\n}\n\n// Calculate query signature for bookmark\nconst crypto = require('crypto');\nconst querySigData = {\n  broker_id: territory.broker_id,\n  zip_code: territory.zip_code,\n  filters: {\n    age_min: 62,\n    equity_min: 150000,\n    equity_percent_min: 40,\n    owner_occupied: true,\n    property_types: ['SFR', 'DPX', 'TPX', 'FPX', 'CND'],\n    avm_min: 400000,\n    avm_max: 3000000,\n    cltv_max: 60\n  }\n};\nconst querySig = crypto.createHash('sha256').update(JSON.stringify(querySigData)).digest('hex');\n\nconsole.log(`Processing ZIP ${territory.zip_code} (${territory.market_name})`);\n\nreturn [{\n  json: {\n    ...brokerState,\n    current_zip: territory.zip_code,\n    market_name: territory.market_name,\n    territory_id: territory.id,\n    query_sig: querySig\n  }\n}];"
      },
      "id": "prepare-zip-pull",
      "name": "Prepare ZIP Pull",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1500, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.skip_remaining }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-target-reached",
      "name": "Target Reached?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1700, 300]
    },
    {
      "parameters": {
        "jsCode": "// Skip to end of broker processing\nconsole.log('Skipping remaining ZIPs - daily target reached');\nreturn [$input.first().json];"
      },
      "id": "skip-to-end",
      "name": "Skip to End",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT * FROM get_or_create_bookmark(\n  '{{ $json.source }}',\n  '{{ $json.query_sig }}'\n)",
        "options": {}
      },
      "id": "get-bookmark",
      "name": "Get Bookmark",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1900, 400],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge bookmark data with current state\nconst currentState = $('Prepare ZIP Pull').first().json;\nconst bookmark = $input.first().json;\n\nreturn [{\n  json: {\n    ...currentState,\n    bookmark_id: bookmark.id,\n    last_page: bookmark.last_page_fetched || 0,\n    start_offset: (bookmark.last_page_fetched || 0) * 50\n  }\n}];"
      },
      "id": "merge-bookmark",
      "name": "Merge Bookmark",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2100, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.propertyradar.com/v1/properties",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Purchase",
              "value": "1"
            },
            {
              "name": "Limit",
              "value": "50"
            },
            {
              "name": "Start",
              "value": "={{ $json.start_offset }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({Criteria: [{name: 'ZipFive', value: [$json.current_zip]}, {name: 'Age', value: [[62, null]]}, {name: 'AvailableEquity', value: [[150000, null]]}, {name: 'EquityPercent', value: [[40, null]]}, {name: 'isSameMailingOrExempt', value: [1]}, {name: 'PropertyType', value: [{name: 'PType', value: ['SFR', 'DPX', 'TPX', 'FPX', 'CND']}]}, {name: 'AVM', value: [[400000, 3000000]]}, {name: 'CLTV', value: [[null, 60]]}]}) }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "propertyradar-api",
      "name": "PropertyRadar API Call",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2300, 400],
      "credentials": {
        "httpBearerAuth": {
          "id": "81i7WbQilIMSh4E3",
          "name": "PropertyRadar"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract PropertyRadar results and check for duplicates\nconst response = $input.first().json;\nconst results = response.results || [];\nconst state = $('Merge Bookmark').first().json;\n\nconsole.log(`API Response: ${results.length} records, Total Cost: $${response.totalCost}, Total Available: ${response.totalResultCount}`);\n\nif (results.length === 0) {\n  console.log('No more results for this ZIP');\n  return [{\n    json: {\n      ...state,\n      no_results: true,\n      radar_ids: []\n    }\n  }];\n}\n\n// Extract radar_ids for dedup check\nconst radarIds = results.map(r => r.RadarID);\n\nreturn [{\n  json: {\n    ...state,\n    radar_ids: radarIds,\n    raw_results: results,\n    result_count: results.length,\n    total_available: response.totalResultCount,\n    api_cost: parseFloat(response.totalCost || 0)\n  }\n}];"
      },
      "id": "extract-radar-ids",
      "name": "Extract Radar IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2500, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT has_vendor_ids_been_seen(\n  '{{ $json.source }}',\n  '{{ $json.query_sig }}',\n  ARRAY[{{ $json.radar_ids.map(id => `'${id}'`).join(',') }}]\n) as seen",
        "options": {}
      },
      "id": "check-seen-before",
      "name": "Check If Seen Before",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2700, 400],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.seen }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-seen",
      "name": "Already Seen?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2900, 400]
    },
    {
      "parameters": {
        "jsCode": "// Stop-when-known triggered - these leads already processed\nconst state = $('Extract Radar IDs').first().json;\n\nconsole.log(`Stop-when-known: ${state.radar_ids.length} leads already seen in ZIP ${state.current_zip}`);\n\nreturn [{\n  json: {\n    ...state,\n    stopped: true,\n    reason: 'already_seen'\n  }\n}];"
      },
      "id": "stop-seen",
      "name": "Stop (Already Seen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse PropertyRadar results into lead format\nconst state = $('Extract Radar IDs').first().json;\nconst results = state.raw_results;\nconst brokerId = state.broker_id;\n\nconst crypto = require('crypto');\n\nconst leads = results.map(prop => {\n  // Compute address hash for fallback dedup\n  const line1 = (prop.Address || '').toUpperCase().trim();\n  const city = (prop.City || '').toUpperCase().trim();\n  const stateCode = (prop.State || '').toUpperCase().trim();\n  const zip = (prop.ZipFive || '').substring(0, 5);\n  const normalized = `${line1}|${city}|${stateCode}|${zip}`;\n  const addrHash = crypto.createHash('sha256').update(normalized).digest('hex');\n\n  return {\n    radar_id: prop.RadarID,\n    property_address: prop.Address,\n    property_city: prop.City,\n    property_state: prop.State,\n    property_zip: prop.ZipFive,\n    property_value: prop.AVM,\n    estimated_equity: prop.AvailableEquity,\n    age: prop.Age || null,\n    owner_occupied: prop.isSameMailingOrExempt === 1,\n    apn: prop.APN || null,\n    county_fips: prop.FIPS || null,\n    addr_hash: addrHash,\n    assigned_broker_id: brokerId,\n    source: 'propertyradar',\n    radar_property_data: prop,\n    radar_api_version: 'v1'\n  };\n});\n\nconsole.log(`Parsed ${leads.length} PropertyRadar leads`);\n\nreturn leads.map(lead => ({ json: lead }));"
      },
      "id": "parse-results",
      "name": "Parse PropertyRadar Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT upsert_lead_from_radar(\n  radar_id := '{{ $json.radar_id }}',\n  property_address := '{{ $json.property_address }}',\n  property_city := '{{ $json.property_city }}',\n  property_state := '{{ $json.property_state }}',\n  property_zip := '{{ $json.property_zip }}',\n  property_value := {{ $json.property_value }},\n  estimated_equity := {{ $json.estimated_equity }},\n  age := {{ $json.age }},\n  owner_occupied := {{ $json.owner_occupied }},\n  apn := '{{ $json.apn }}',\n  county_fips := '{{ $json.county_fips }}',\n  addr_hash := '{{ $json.addr_hash }}',\n  assigned_broker_id := '{{ $json.assigned_broker_id }}'::uuid,\n  radar_property_data := '{{ JSON.stringify($json.radar_property_data) }}'::jsonb,\n  radar_api_version := '{{ $json.radar_api_version }}'\n) as lead_id",
        "options": {}
      },
      "id": "upsert-lead",
      "name": "Upsert Lead to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [3300, 500],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "tableId": "pipeline_events",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "event_type",
              "fieldValue": "='lead_created'"
            },
            {
              "fieldId": "lead_id",
              "fieldValue": "={{ $json.lead_id }}"
            },
            {
              "fieldId": "broker_id",
              "fieldValue": "={{ $('Init Broker Pull').first().json.broker_id }}"
            },
            {
              "fieldId": "event_data",
              "fieldValue": "={{ JSON.stringify({source: 'propertyradar', zip: $('Prepare ZIP Pull').first().json.current_zip}) }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "='pending_enrichment'"
            }
          ]
        },
        "options": {}
      },
      "id": "queue-enrichment",
      "name": "Queue for Enrichment",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [3500, 500],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Update lead count and check if we should continue\nconst state = $('Prepare ZIP Pull').first().json;\nconst newCount = state.leads_pulled_today + 1;\n\nconsole.log(`Progress: ${newCount}/${state.daily_target} leads`);\n\nreturn [{\n  json: {\n    ...state,\n    leads_pulled_today: newCount\n  }\n}];"
      },
      "id": "update-count",
      "name": "Update Lead Count",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3700, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT upsert_broker_daily_stat(\n  p_broker_id := '{{ $json.broker_id }}'::uuid,\n  p_increment_leads := 1,\n  p_current_zip := '{{ $json.current_zip }}'\n) as stat_id",
        "options": {}
      },
      "id": "update-broker-stat",
      "name": "Update Broker Stat",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [3700, 650],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "loop-check-leads",
      "name": "Loop Check (Leads)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [3900, 500]
    },
    {
      "parameters": {
        "operation": "insert",
        "tableId": "lead_source_events",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "source",
              "fieldValue": "='propertyradar'"
            },
            {
              "fieldId": "pull_params",
              "fieldValue": "={{ JSON.stringify({broker_id: $json.broker_id, zip: $json.current_zip, query_sig: $json.query_sig}) }}"
            },
            {
              "fieldId": "page_number",
              "fieldValue": "={{ $json.last_page + 1 }}"
            },
            {
              "fieldId": "seen_vendor_ids",
              "fieldValue": "={{ $json.radar_ids }}"
            },
            {
              "fieldId": "first_id",
              "fieldValue": "={{ $json.radar_ids[0] }}"
            },
            {
              "fieldId": "last_id",
              "fieldValue": "={{ $json.radar_ids[$json.radar_ids.length - 1] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "log-source-event",
      "name": "Log Source Event",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [4100, 400],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE source_bookmarks \nSET last_page_fetched = {{ $json.last_page + 1 }},\n    updated_at = NOW()\nWHERE id = '{{ $json.bookmark_id }}'::uuid\nRETURNING *",
        "options": {}
      },
      "id": "update-bookmark",
      "name": "Update Bookmark",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [4300, 400],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Check if we need to continue to next ZIP\nconst state = $input.first().json;\n\nconsole.log(`ZIP ${state.current_zip} complete. Moving to next ZIP...`);\n\nreturn [state];"
      },
      "id": "zip-complete",
      "name": "ZIP Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4500, 400]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "loop-check-zips",
      "name": "Loop Check (ZIPs)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [4700, 300]
    },
    {
      "parameters": {
        "jsCode": "// Broker processing complete\nconst state = $input.first().json;\n\nconsole.log(`\\n✓ Broker ${state.broker_name} complete: ${state.leads_pulled_today}/${state.daily_target} leads`);\n\nreturn [state];"
      },
      "id": "broker-complete",
      "name": "Broker Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4900, 300]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "loop-check-brokers",
      "name": "Loop Check (Brokers)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [5100, 300]
    },
    {
      "parameters": {
        "jsCode": "// Final summary\nconst sessionId = $('Initialize Session').first().json.session_id;\n\nconsole.log('\\n=================================');\nconsole.log('PropertyRadar Daily Pull Complete');\nconsole.log(`Session ID: ${sessionId}`);\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    status: 'complete',\n    completed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "final-summary",
      "name": "Final Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [5300, 300]
    }
  ],
  "connections": {
    "Daily Trigger (6am)": {
      "main": [[{"node": "Initialize Session", "type": "main", "index": 0}]]
    },
    "Initialize Session": {
      "main": [[{"node": "Fetch Active Brokers", "type": "main", "index": 0}]]
    },
    "Fetch Active Brokers": {
      "main": [[{"node": "Loop Through Brokers", "type": "main", "index": 0}]]
    },
    "Loop Through Brokers": {
      "main": [[{"node": "Init Broker Pull", "type": "main", "index": 0}]]
    },
    "Init Broker Pull": {
      "main": [[{"node": "Initialize Daily Stat", "type": "main", "index": 0}]]
    },
    "Initialize Daily Stat": {
      "main": [[{"node": "Fetch Broker Territories", "type": "main", "index": 0}]]
    },
    "Fetch Broker Territories": {
      "main": [[{"node": "Loop Through ZIPs", "type": "main", "index": 0}]]
    },
    "Loop Through ZIPs": {
      "main": [[{"node": "Prepare ZIP Pull", "type": "main", "index": 0}]]
    },
    "Prepare ZIP Pull": {
      "main": [[{"node": "Target Reached?", "type": "main", "index": 0}]]
    },
    "Target Reached?": {
      "main": [
        [{"node": "Skip to End", "type": "main", "index": 0}],
        [{"node": "Get Bookmark", "type": "main", "index": 0}]
      ]
    },
    "Skip to End": {
      "main": [[{"node": "Loop Check (ZIPs)", "type": "main", "index": 0}]]
    },
    "Get Bookmark": {
      "main": [[{"node": "Merge Bookmark", "type": "main", "index": 0}]]
    },
    "Merge Bookmark": {
      "main": [[{"node": "PropertyRadar API Call", "type": "main", "index": 0}]]
    },
    "PropertyRadar API Call": {
      "main": [[{"node": "Extract Radar IDs", "type": "main", "index": 0}]]
    },
    "Extract Radar IDs": {
      "main": [[{"node": "Check If Seen Before", "type": "main", "index": 0}]]
    },
    "Check If Seen Before": {
      "main": [[{"node": "Already Seen?", "type": "main", "index": 0}]]
    },
    "Already Seen?": {
      "main": [
        [{"node": "Stop (Already Seen)", "type": "main", "index": 0}],
        [{"node": "Parse PropertyRadar Results", "type": "main", "index": 0}]
      ]
    },
    "Stop (Already Seen)": {
      "main": [[{"node": "Loop Check (ZIPs)", "type": "main", "index": 0}]]
    },
    "Parse PropertyRadar Results": {
      "main": [[{"node": "Upsert Lead to Supabase", "type": "main", "index": 0}]]
    },
    "Upsert Lead to Supabase": {
      "main": [[{"node": "Queue for Enrichment", "type": "main", "index": 0}]]
    },
    "Queue for Enrichment": {
      "main": [[{"node": "Update Lead Count", "type": "main", "index": 0}]]
    },
    "Update Lead Count": {
      "main": [[{"node": "Update Broker Stat", "type": "main", "index": 0}]]
    },
    "Update Broker Stat": {
      "main": [[{"node": "Loop Check (Leads)", "type": "main", "index": 0}]]
    },
    "Loop Check (Leads)": {
      "main": [
        [{"node": "Parse PropertyRadar Results", "type": "main", "index": 0}],
        [{"node": "Log Source Event", "type": "main", "index": 0}]
      ]
    },
    "Log Source Event": {
      "main": [[{"node": "Update Bookmark", "type": "main", "index": 0}]]
    },
    "Update Bookmark": {
      "main": [[{"node": "ZIP Complete", "type": "main", "index": 0}]]
    },
    "ZIP Complete": {
      "main": [[{"node": "Loop Check (ZIPs)", "type": "main", "index": 0}]]
    },
    "Loop Check (ZIPs)": {
      "main": [
        [{"node": "Loop Through ZIPs", "type": "main", "index": 0}],
        [{"node": "Broker Complete", "type": "main", "index": 0}]
      ]
    },
    "Broker Complete": {
      "main": [[{"node": "Loop Check (Brokers)", "type": "main", "index": 0}]]
    },
    "Loop Check (Brokers)": {
      "main": [
        [{"node": "Loop Through Brokers", "type": "main", "index": 0}],
        [{"node": "Final Summary", "type": "main", "index": 0}]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "pinData": {},
  "tags": []
}

