{
  "name": "Rework Funnel Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 9 * * *"
            }
          ]
        }
      },
      "id": "daily-trigger",
      "name": "Daily Rework Check",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "https://api.softr.io/v1/api/apps/{{ $vars.SOFTR_APP_ID }}/tables/leads/records",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "softrApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter",
              "value": "status='not_converted' AND engagement_score>=20"
            },
            {
              "name": "sort",
              "value": "created_date"
            }
          ]
        },
        "options": {}
      },
      "id": "get-rework-candidates",
      "name": "Get Rework Candidates",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Categorize leads by rework strategy\nconst leads = $input.all();\nconst reworkCategories = {\n  day8_14: [],\n  day15_21: [],\n  day22_30: [],\n  day31_plus: []\n};\n\nleads.forEach(lead => {\n  const leadData = lead.json;\n  const daysSinceFirstContact = Math.floor(\n    (new Date() - new Date(leadData.created_date)) / (1000 * 60 * 60 * 24)\n  );\n  \n  const engagementLevel = leadData.engagement_score || 0;\n  const hasReplied = leadData.email_replied || false;\n  const hasOpened = leadData.email_opened_count >= 3;\n  \n  // Categorize based on days and engagement\n  if (daysSinceFirstContact >= 31) {\n    reworkCategories.day31_plus.push({\n      ...leadData,\n      days_since_first_contact: daysSinceFirstContact,\n      rework_strategy: 'package_for_sale'\n    });\n  } else if (daysSinceFirstContact >= 22) {\n    reworkCategories.day22_30.push({\n      ...leadData,\n      days_since_first_contact: daysSinceFirstContact,\n      rework_strategy: 'urgency_email'\n    });\n  } else if (daysSinceFirstContact >= 15) {\n    reworkCategories.day15_21.push({\n      ...leadData,\n      days_since_first_contact: daysSinceFirstContact,\n      rework_strategy: 'human_call'\n    });\n  } else if (daysSinceFirstContact >= 8) {\n    reworkCategories.day8_14.push({\n      ...leadData,\n      days_since_first_contact: daysSinceFirstContact,\n      rework_strategy: 'SMS_campaign'\n    });\n  }\n});\n\n// Return categorized leads\nreturn Object.keys(reworkCategories).map(category => ({\n  category,\n  leads: reworkCategories[category],\n  count: reworkCategories[category].length\n}));"
      },
      "id": "categorize-leads",
      "name": "Categorize Leads",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-sms-candidates",
              "leftValue": "={{ $json.category }}",
              "rightValue": "day8_14",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "has-leads",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-sms-campaign",
      "name": "Check SMS Campaign",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Generate SMS messages for day 8-14 leads\nconst categoryData = $input.first().json;\nconst leads = categoryData.leads;\n\nconst smsMessages = leads.map(lead => {\n  // Get different persona for rework\n  const reworkPersona = getReworkPersona(lead.assigned_persona);\n  \n  const message = `Hi ${lead.first_name}, I noticed you were interested in reverse mortgage info but haven't connected with ${lead.broker_name}. Rates are changing next week. Can I have ${lead.broker_name} call you today? - ${reworkPersona.name}`;\n  \n  return {\n    lead_id: lead.id,\n    phone: lead.phone,\n    message: message,\n    persona: reworkPersona,\n    strategy: 'SMS_campaign',\n    expected_response_rate: 0.05\n  };\n});\n\nfunction getReworkPersona(originalPersona) {\n  // Switch to different persona for rework\n  const personaMap = {\n    'Carlos Rodriguez': { name: 'Maria Rodriguez', voiceId: 'elevenlabs_spanish_accent_female' },\n    'Maria Rodriguez': { name: 'Carlos Rodriguez', voiceId: 'elevenlabs_spanish_accent_male' },\n    'Priya Patel': { name: 'Rahul Patel', voiceId: 'elevenlabs_indian_accent_male' },\n    'Rahul Patel': { name: 'Priya Patel', voiceId: 'elevenlabs_indian_accent_female' },\n    'Marcus Washington': { name: 'Latoya Washington', voiceId: 'elevenlabs_african_american_female' },\n    'Latoya Washington': { name: 'Marcus Washington', voiceId: 'elevenlabs_african_american_male' }\n  };\n  \n  return personaMap[originalPersona] || { name: 'Jennifer Anderson', voiceId: 'elevenlabs_american_female' };\n}\n\nreturn smsMessages;"
      },
      "id": "generate-sms-messages",
      "name": "Generate SMS Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-human-call-candidates",
              "leftValue": "={{ $json.category }}",
              "rightValue": "day15_21",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "has-leads",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-human-call",
      "name": "Check Human Call",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate human call scripts for day 15-21 leads\nconst categoryData = $input.first().json;\nconst leads = categoryData.leads;\n\nconst callScripts = leads.map(lead => {\n  const script = `Hi ${lead.first_name}, this is ${lead.manager_name || 'Sarah'} from Equity Connect. I saw you were interested in reverse mortgage information but haven't been able to connect with ${lead.broker_name}. I wanted to personally ensure you get the information you need. Can I have ${lead.broker_name} call you today?`;\n  \n  return {\n    lead_id: lead.id,\n    phone: lead.phone,\n    script: script,\n    manager_name: lead.manager_name || 'Sarah',\n    strategy: 'human_call',\n    expected_response_rate: 0.15,\n    call_time: getOptimalCallTime(lead.timezone || 'EST')\n  };\n});\n\nfunction getOptimalCallTime(timezone) {\n  const timeSlots = {\n    'EST': ['10:00', '14:00', '16:00'],\n    'PST': ['11:00', '15:00', '17:00'],\n    'CST': ['10:00', '14:00', '16:00']\n  };\n  \n  return timeSlots[timezone] || timeSlots['EST'];\n}\n\nreturn callScripts;"
      },
      "id": "generate-call-scripts",
      "name": "Generate Call Scripts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-urgency-email-candidates",
              "leftValue": "={{ $json.category }}",
              "rightValue": "day22_30",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "has-leads",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-urgency-email",
      "name": "Check Urgency Email",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "jsCode": "// Generate urgency emails for day 22-30 leads\nconst categoryData = $input.first().json;\nconst leads = categoryData.leads;\n\nconst urgencyEmails = leads.map(lead => {\n  const subject = `Final Notice: Reverse Mortgage Rates Increasing`;\n  const message = `Hi ${lead.first_name},\n\nThis is your final notice that reverse mortgage rates are increasing next month.\n\n${lead.broker_name} has reserved time to call you today. This is your last chance at current rates.\n\nIf you're interested, please reply with your preferred time:\n- Morning (9 AM - 12 PM)\n- Afternoon (1 PM - 4 PM)\n- Evening (5 PM - 7 PM)\n\nBest regards,\nEquity Connect Team`;\n  \n  return {\n    lead_id: lead.id,\n    email: lead.email,\n    subject: subject,\n    message: message,\n    strategy: 'urgency_email',\n    expected_response_rate: 0.03,\n    urgency_level: 'high'\n  };\n});\n\nreturn urgencyEmails;"
      },
      "id": "generate-urgency-emails",
      "name": "Generate Urgency Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-package-candidates",
              "leftValue": "={{ $json.category }}",
              "rightValue": "day31_plus",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "has-leads",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-package-for-sale",
      "name": "Check Package for Sale",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "jsCode": "// Package leads for sale (day 31+)\nconst categoryData = $input.first().json;\nconst leads = categoryData.leads;\n\n// Group leads by engagement level for pricing\nconst leadPackages = {\n  high_engagement: leads.filter(lead => lead.engagement_score >= 60),\n  medium_engagement: leads.filter(lead => lead.engagement_score >= 40 && lead.engagement_score < 60),\n  low_engagement: leads.filter(lead => lead.engagement_score >= 20 && lead.engagement_score < 40)\n};\n\nconst packages = Object.keys(leadPackages).map(engagementLevel => {\n  const packageLeads = leadPackages[engagementLevel];\n  \n  if (packageLeads.length === 0) return null;\n  \n  const pricing = {\n    high_engagement: 50,    // $50 per lead\n    medium_engagement: 25,  // $25 per lead\n    low_engagement: 15      // $15 per lead\n  };\n  \n  return {\n    package_type: engagementLevel,\n    lead_count: packageLeads.length,\n    price_per_lead: pricing[engagementLevel],\n    total_value: packageLeads.length * pricing[engagementLevel],\n    leads: packageLeads.map(lead => ({\n      id: lead.id,\n      name: `${lead.first_name} ${lead.last_name}`,\n      phone: lead.phone,\n      email: lead.email,\n      engagement_score: lead.engagement_score,\n      days_old: lead.days_since_first_contact\n    })),\n    strategy: 'package_for_sale',\n    target_buyers: getTargetBuyers(engagementLevel)\n  };\n}).filter(pkg => pkg !== null);\n\nfunction getTargetBuyers(engagementLevel) {\n  const buyerMap = {\n    high_engagement: ['premium_brokers', 'call_centers'],\n    medium_engagement: ['standard_brokers', 'call_centers'],\n    low_engagement: ['volume_brokers', 'data_companies']\n  };\n  \n  return buyerMap[engagementLevel] || ['data_companies'];\n}\n\nreturn packages;"
      },
      "id": "package-leads-for-sale",
      "name": "Package Leads for Sale",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "url": "https://api.twilio.com/2010-04-01/Accounts/{{ $vars.TWILIO_ACCOUNT_SID }}/Messages.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "twilioApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "To",
              "value": "={{ $json.phone }}"
            },
            {
              "name": "From",
              "value": "{{ $vars.TWILIO_PHONE_NUMBER }}"
            },
            {
              "name": "Body",
              "value": "={{ $json.message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-sms-messages",
      "name": "Send SMS Messages",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 100]
    },
    {
      "parameters": {
        "url": "https://api.twilio.com/2010-04-01/Accounts/{{ $vars.TWILIO_ACCOUNT_SID }}/Calls.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "twilioApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "To",
              "value": "={{ $json.phone }}"
            },
            {
              "name": "From",
              "value": "{{ $vars.TWILIO_PHONE_NUMBER }}"
            },
            {
              "name": "Url",
              "value": "{{ $vars.WEBHOOK_URL }}/twilio-call-script?script={{ encodeURIComponent($json.script) }}"
            },
            {
              "name": "Method",
              "value": "POST"
            }
          ]
        },
        "options": {}
      },
      "id": "make-human-calls",
      "name": "Make Human Calls",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "https://api.instantly.ai/api/v1/campaign/{{ $vars.INSTANTLY_CAMPAIGN_ID }}/leads",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "instantlyApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "leads",
              "value": "={{ [{ \"email\": $json.email, \"first_name\": $json.lead_id, \"custom_fields\": { \"urgency_level\": $json.urgency_level, \"rework_strategy\": $json.strategy } }] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-urgency-emails",
      "name": "Send Urgency Emails",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "url": "https://api.softr.io/v1/api/apps/{{ $vars.SOFTR_APP_ID }}/tables/lead_packages/records",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "softrApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "package_type",
              "value": "={{ $json.package_type }}"
            },
            {
              "name": "lead_count",
              "value": "={{ $json.lead_count }}"
            },
            {
              "name": "price_per_lead",
              "value": "={{ $json.price_per_lead }}"
            },
            {
              "name": "total_value",
              "value": "={{ $json.total_value }}"
            },
            {
              "name": "leads_data",
              "value": "={{ JSON.stringify($json.leads) }}"
            },
            {
              "name": "target_buyers",
              "value": "={{ JSON.stringify($json.target_buyers) }}"
            },
            {
              "name": "status",
              "value": "available_for_sale"
            },
            {
              "name": "created_date",
              "value": "={{ $now }}"
            }
          ]
        },
        "options": {}
      },
      "id": "create-lead-packages",
      "name": "Create Lead Packages",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "jsCode": "// Update lead status after rework action\nconst reworkAction = $input.first().json;\n\n// Update lead status in Softr\nconst leadUpdates = {\n  lead_id: reworkAction.lead_id,\n  rework_strategy: reworkAction.strategy,\n  rework_date: new Date().toISOString(),\n  status: reworkAction.strategy === 'package_for_sale' ? 'packaged_for_sale' : 'in_rework'\n};\n\nreturn leadUpdates;"
      },
      "id": "update-lead-status",
      "name": "Update Lead Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "url": "https://api.softr.io/v1/api/apps/{{ $vars.SOFTR_APP_ID }}/tables/leads/records/{{ $json.lead_id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "softrApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "rework_strategy",
              "value": "={{ $json.rework_strategy }}"
            },
            {
              "name": "rework_date",
              "value": "={{ $json.rework_date }}"
            },
            {
              "name": "status",
              "value": "={{ $json.status }}"
            }
          ]
        },
        "options": {}
      },
      "id": "update-lead-in-softr",
      "name": "Update Lead in Softr",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "daily-trigger": {
      "main": [
        [
          {
            "node": "get-rework-candidates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-rework-candidates": {
      "main": [
        [
          {
            "node": "categorize-leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "categorize-leads": {
      "main": [
        [
          {
            "node": "check-sms-campaign",
            "type": "main",
            "index": 0
          },
          {
            "node": "check-human-call",
            "type": "main",
            "index": 0
          },
          {
            "node": "check-urgency-email",
            "type": "main",
            "index": 0
          },
          {
            "node": "check-package-for-sale",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-sms-campaign": {
      "main": [
        [
          {
            "node": "generate-sms-messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-sms-messages": {
      "main": [
        [
          {
            "node": "send-sms-messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-human-call": {
      "main": [
        [
          {
            "node": "generate-call-scripts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-call-scripts": {
      "main": [
        [
          {
            "node": "make-human-calls",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-urgency-email": {
      "main": [
        [
          {
            "node": "generate-urgency-emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-urgency-emails": {
      "main": [
        [
          {
            "node": "send-urgency-emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-package-for-sale": {
      "main": [
        [
          {
            "node": "package-leads-for-sale",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "package-leads-for-sale": {
      "main": [
        [
          {
            "node": "create-lead-packages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-sms-messages": {
      "main": [
        [
          {
            "node": "update-lead-status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "make-human-calls": {
      "main": [
        [
          {
            "node": "update-lead-status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-urgency-emails": {
      "main": [
        [
          {
            "node": "update-lead-status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-lead-packages": {
      "main": [
        [
          {
            "node": "update-lead-status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-lead-status": {
      "main": [
        [
          {
            "node": "update-lead-in-softr",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
