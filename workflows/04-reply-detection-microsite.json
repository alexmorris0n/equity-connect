{
  "name": "04 - Reply Detection & Microsite (Auto)",
  "meta": {
    "description": "Detects email replies, analyzes sentiment, auto-sends microsite link for positive replies",
    "documentation": {
      "purpose": "Core of reply-first strategy - converts replies to microsite visits",
      "trigger": "Instantly webhook on email reply",
      "features": [
        "Real-time reply detection via webhook",
        "AI sentiment analysis (positive/negative/neutral)",
        "Auto-send microsite link (positive replies only)",
        "Database tracking (reply timestamps, sentiment)",
        "Microsite URL generation (city-based)",
        "Interaction logging (for analytics)"
      ],
      "flow": [
        "1. Instantly webhook triggers on reply",
        "2. Extract reply data (email, text, campaign)",
        "3. Look up lead in database",
        "4. AI sentiment analysis",
        "5. If POSITIVE:",
        "   - Generate microsite URL",
        "   - Send auto-response with link",
        "   - Log microsite_sent event",
        "6. If NEGATIVE:",
        "   - Mark as not interested",
        "   - Stop campaign",
        "7. Update lead status and reply timestamp"
      ],
      "ai_prompts": {
        "sentiment_analysis": "Classify email reply as POSITIVE (interested), NEGATIVE (not interested), or NEUTRAL (unclear)"
      }
    }
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "instantly-reply-webhook",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [240, 300],
      "id": "webhook-trigger",
      "name": "Instantly Reply Webhook",
      "webhookId": "instantly-reply-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract reply data from Instantly webhook\nconst webhookData = $input.first().json;\n\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log('📧 Reply Received');\nconsole.log(`From: ${webhookData.from_email || webhookData.lead_email}`);\nconsole.log(`Subject: ${webhookData.subject || 'N/A'}`);\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\nreturn [{\n  json: {\n    lead_email: webhookData.from_email || webhookData.lead_email,\n    reply_text: webhookData.body || webhookData.message || webhookData.text,\n    subject: webhookData.subject || '',\n    campaign_id: webhookData.campaign_id || null,\n    replied_at: webhookData.timestamp || new Date().toISOString(),\n    // For replying from same mailbox\n    reply_to_uuid: webhookData.email_id || webhookData.uuid || webhookData.id,\n    sender_account: webhookData.to_email || webhookData.eaccount,\n    raw_webhook: webhookData\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300],
      "id": "extract-reply-data",
      "name": "Extract Reply Data"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "leads",
        "filters": {
          "conditions": [
            {
              "keyName": "primary_email",
              "condition": "eq",
              "keyValue": "={{ $json.lead_email }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [720, 300],
      "id": "lookup-lead",
      "name": "Lookup Lead in Database",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// AI Sentiment Analysis using simple keyword detection\n// TODO: Replace with actual OpenAI/Claude API call for production\nconst replyData = $('Extract Reply Data').first().json;\nconst replyText = (replyData.reply_text || '').toLowerCase();\n\n// Positive keywords\nconst positiveKeywords = [\n  'yes', 'interested', 'info', 'more', 'details', 'tell me',\n  'send', 'calculate', 'numbers', 'call', 'schedule', 'meeting',\n  'sounds good', 'learn more', 'want to know', 'curious'\n];\n\n// Negative keywords\nconst negativeKeywords = [\n  'stop', 'unsubscribe', 'remove', 'not interested', 'no thanks',\n  'dont contact', \"don't contact\", 'leave me alone', 'no',\n  'never', 'delete', 'opt out', 'spam'\n];\n\n// Check for matches\nlet sentiment = 'NEUTRAL';\nlet confidence = 0;\n\nfor (const keyword of positiveKeywords) {\n  if (replyText.includes(keyword)) {\n    sentiment = 'POSITIVE';\n    confidence = 80;\n    break;\n  }\n}\n\nfor (const keyword of negativeKeywords) {\n  if (replyText.includes(keyword)) {\n    sentiment = 'NEGATIVE';\n    confidence = 95;\n    break;\n  }\n}\n\n// If very short reply (1-3 words) without clear keywords\nif (replyText.split(' ').length <= 3 && sentiment === 'NEUTRAL') {\n  confidence = 30;\n}\n\nconsole.log(`Sentiment: ${sentiment} (${confidence}% confidence)`);\nconsole.log(`Reply text: \"${replyText.substring(0, 100)}...\"`);\n\nreturn [{\n  json: {\n    ...replyData,\n    sentiment: sentiment,\n    confidence: confidence,\n    analyzed_at: new Date().toISOString()\n  }\n}];\n\n// PRODUCTION TODO:\n// Replace with actual AI API call to OpenAI/Claude:\n/*\nconst prompt = `Analyze this email reply and classify as:\n- POSITIVE: Interested, wants info, asking questions\n- NEGATIVE: Not interested, unsubscribe, leave alone  \n- NEUTRAL: Unclear, might need follow-up\n\nReply: \"${replyText}\"\n\nRespond with just: POSITIVE, NEGATIVE, or NEUTRAL`;\n\nconst aiResponse = await callOpenAI(prompt);\n*/"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [960, 300],
      "id": "analyze-sentiment",
      "name": "AI Sentiment Analysis"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "sentiment-check",
              "leftValue": "={{ $json.sentiment }}",
              "rightValue": "POSITIVE",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1200, 300],
      "id": "check-sentiment",
      "name": "Is Positive Reply?"
    },
    {
      "parameters": {
        "jsCode": "// Generate microsite URL and prepare auto-response\nconst lead = $('Lookup Lead in Database').first().json;\nconst replyData = $('AI Sentiment Analysis').first().json;\n\n// Generate city-based microsite URL\nconst city = (lead.property_city || 'california')\n  .toLowerCase()\n  .replace(/[^a-z0-9]+/g, '-')\n  .replace(/^-+|-+$/g, '');\n\nconst micrositeUrl = `https://${city}.equityconnect.com?lead_id=${lead.id}`;\n\n// Prepare auto-response email\nconst emailBody = `Great to hear from you, ${lead.first_name}!\n\nI've prepared a personalized calculator showing your exact available equity for ${lead.property_address}:\n\n${micrositeUrl}\n\nThis will show you:\n✓ Your estimated home value\n✓ Available equity range  \n✓ Monthly payment options\n✓ Lump sum options\n\nTakes 30 seconds to review.\n\nOnce you've had a chance to look it over, would you like to schedule a quick call to discuss your options?\n\nYou can book directly on the calculator page, or just reply to this email.\n\n${lead.first_name || 'Best'},\nEquity Connect`;\n\nconsole.log(`Generated microsite URL: ${micrositeUrl}`);\n\nreturn [{\n  json: {\n    lead_id: lead.id,\n    lead_email: lead.primary_email,\n    lead_first_name: lead.first_name,\n    property_address: lead.property_address,\n    city: lead.property_city,\n    microsite_url: micrositeUrl,\n    email_subject: `Your Personalized Equity Calculator - ${lead.property_city}`,\n    email_body: emailBody,\n    original_reply: replyData.reply_text\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1440, 200],
      "id": "generate-microsite",
      "name": "Generate Microsite URL"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.instantly.ai/api/v1/email/reply",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "instantlyApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"reply_to_uuid\": $('Extract Reply Data').first().json.reply_to_uuid,\n  \"eaccount\": $('Extract Reply Data').first().json.sender_account,\n  \"subject\": $json.email_subject,\n  \"body\": {\n    \"text\": $json.email_body\n  }\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1680, 200],
      "id": "send-microsite",
      "name": "Reply from Same Mailbox",
      "notes": "Replies from the same mailbox that sent the original email",
      "credentials": {
        "instantlyApi": {
          "id": "TSGbMOFEJY9CmhHW",
          "name": "Instantly account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/log_lead_reply",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"p_lead_id\": $('Lookup Lead in Database').first().json.id,\n  \"p_reply_text\": $('AI Sentiment Analysis').first().json.reply_text,\n  \"p_sentiment\": 'POSITIVE'\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1920, 200],
      "id": "update-positive-reply",
      "name": "Update Lead (Positive Reply)",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/log_lead_reply",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"p_lead_id\": $('Lookup Lead in Database').first().json.id,\n  \"p_reply_text\": $('AI Sentiment Analysis').first().json.reply_text,\n  \"p_sentiment\": 'NEGATIVE'\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1440, 400],
      "id": "update-negative-reply",
      "name": "Update Lead (Negative Reply)",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log microsite sent event\nconst micrositeData = $('Generate Microsite URL').first().json;\nconst lead = $('Lookup Lead in Database').first().json;\n\nconsole.log('✅ Microsite link sent to:', lead.first_name, lead.last_name);\nconsole.log('   URL:', micrositeData.microsite_url);\nconsole.log('   Email:', micrositeData.lead_email);\n\nreturn [{\n  json: {\n    lead_id: lead.id,\n    microsite_url: micrositeData.microsite_url,\n    sent_at: new Date().toISOString(),\n    status: 'microsite_sent'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2160, 200],
      "id": "log-microsite",
      "name": "Log Microsite Sent"
    },
    {
      "parameters": {
        "jsCode": "// Log negative reply\nconst lead = $('Lookup Lead in Database').first().json;\nconst replyData = $('AI Sentiment Analysis').first().json;\n\nconsole.log('❌ Negative reply from:', lead.first_name, lead.last_name);\nconsole.log('   Sentiment:', replyData.sentiment);\nconsole.log('   Lead marked as not interested');\n\nreturn [{\n  json: {\n    lead_id: lead.id,\n    status: 'not_interested',\n    updated_at: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 400],
      "id": "log-negative",
      "name": "Log Negative Reply"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2400, 300],
      "id": "done",
      "name": "Reply Processed"
    }
  ],
  "connections": {
    "Instantly Reply Webhook": {
      "main": [[{"node": "Extract Reply Data", "type": "main", "index": 0}]]
    },
    "Extract Reply Data": {
      "main": [[{"node": "Lookup Lead in Database", "type": "main", "index": 0}]]
    },
    "Lookup Lead in Database": {
      "main": [[{"node": "AI Sentiment Analysis", "type": "main", "index": 0}]]
    },
    "AI Sentiment Analysis": {
      "main": [[{"node": "Is Positive Reply?", "type": "main", "index": 0}]]
    },
    "Is Positive Reply?": {
      "main": [
        [{"node": "Generate Microsite URL", "type": "main", "index": 0}],
        [{"node": "Update Lead (Negative Reply)", "type": "main", "index": 0}]
      ]
    },
    "Generate Microsite URL": {
      "main": [[{"node": "Send Microsite Email", "type": "main", "index": 0}]]
    },
    "Send Microsite Email": {
      "main": [[{"node": "Update Lead (Positive Reply)", "type": "main", "index": 0}]]
    },
    "Update Lead (Positive Reply)": {
      "main": [[{"node": "Log Microsite Sent", "type": "main", "index": 0}]]
    },
    "Update Lead (Negative Reply)": {
      "main": [[{"node": "Log Negative Reply", "type": "main", "index": 0}]]
    },
    "Log Microsite Sent": {
      "main": [[{"node": "Reply Processed", "type": "main", "index": 0}]]
    },
    "Log Negative Reply": {
      "main": [[{"node": "Reply Processed", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}

