{
  "name": "KB Upload - Working Version",
  "nodes": [
    {
      "parameters": {},
      "id": "e8ab66c8-d0f3-49dc-bbe4-7635ddc07fc2",
      "name": "Start Upload",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Create array of file paths to read\nconst basePath = 'C:/Users/alex/OneDrive/Desktop/Cursor/equity-connect/docs/REVERSE_MORTGAGE_VECTOR_DATABASE';\n\nconst files = [\n  'reverse_mortgage_kb_section_1_UPDATED.md',\n  'reverse_mortgage_kb_section_2_UPDATED.md',\n  'reverse_mortgage_kb_section_3_UPDATED.md',\n  'reverse_mortgage_kb_section_4_UPDATED.md'\n];\n\nreturn files.map((file, index) => ({\n  json: {\n    filePath: `${basePath}/${file}`,\n    section: `section_${index + 1}`,\n    fileName: file\n  }\n}));"
      },
      "id": "f293e3c9-db97-44c7-af30-33ba80796898",
      "name": "Prepare File Paths",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "filePath": "={{ $json.filePath }}",
        "options": {}
      },
      "id": "file-reader",
      "name": "Read KB Files",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Get the file content and metadata\nconst fileContent = $input.first().binary.data.data.toString('utf8');\nconst section = $input.first().json.section;\nconst fileName = $input.first().json.fileName;\n\n// Split by ### headers to create semantic chunks\nconst chunks = fileContent.split(/(?=###\\s)/);\n\nconst documents = [];\n\nchunks.forEach((chunk, index) => {\n  const cleanChunk = chunk.trim();\n  \n  // Only chunks with substantial content\n  if (cleanChunk.length > 100) {\n    const headingMatch = cleanChunk.match(/###\\s+(.+?)(?:\\n|$)/);\n    const heading = headingMatch ? headingMatch[1].trim() : `Part ${index + 1}`;\n    \n    documents.push({\n      json: {\n        pageContent: cleanChunk,\n        metadata: {\n          section: section,\n          section_title: fileName.replace('_UPDATED.md', ''),\n          chunk_heading: heading,\n          chunk_index: index,\n          content_type: 'reverse_mortgage_kb',\n          source: 'barbara_knowledge_base',\n          created_at: new Date().toISOString()\n        }\n      }\n    });\n  }\n});\n\nconsole.log(`✅ ${section}: Created ${documents.length} chunks`);\n\nreturn documents;"
      },
      "id": "chunk-docs",
      "name": "Chunk into Sections",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "mode": "list",
          "value": "vector_embeddings"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [1120, 300],
      "id": "6d6fb5a1-a5af-4a2b-a9a6-68bca7135e0a",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [1120, 480],
      "id": "c20b0eda-710a-4ff4-99dd-252b74877dbb",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "model": "text-embedding-ada-002",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [1120, 120],
      "id": "2850f0aa-dd3b-4bb3-b9a3-60374f0476bf",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "openai",
          "name": "OpenAI account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log('✅ Knowledge Base Upload Complete!');\nconsole.log(`Total chunks uploaded: ${items.length}`);\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\nreturn [{\n  json: {\n    success: true,\n    chunks_uploaded: items.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "800b1ccf-b32c-459f-8a95-b0d70782a7e8",
      "name": "Success Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Start Upload": {
      "main": [
        [
          {
            "node": "Prepare File Paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare File Paths": {
      "main": [
        [
          {
            "node": "Read KB Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read KB Files": {
      "main": [
        [
          {
            "node": "Chunk into Sections",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk into Sections": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Success Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-13T00:00:00.000Z",
  "versionId": "1"
}

