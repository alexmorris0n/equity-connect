{
  "nodes": [
    {
      "parameters": {},
      "id": "e8ab66c8-d0f3-49dc-bbe4-7635ddc07fc2",
      "name": "Start Upload",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -608,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "// PASTE YOUR 4 KB SECTION FILES HERE\n// Copy content from docs/REVERSE_MORTGAGE_VECTOR_DATABASE/\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Option 1: If file system access works\ntry {\n  const docsPath = 'C:/Users/alex/OneDrive/Desktop/Cursor/equity-connect/docs/REVERSE_MORTGAGE_VECTOR_DATABASE';\n  \n  const files = [\n    'reverse_mortgage_kb_section_1_UPDATED.md',\n    'reverse_mortgage_kb_section_2_UPDATED.md',\n    'reverse_mortgage_kb_section_3_UPDATED.md',\n    'reverse_mortgage_kb_section_4_UPDATED.md'\n  ];\n  \n  const documents = [];\n  \n  for (const file of files) {\n    const filePath = path.join(docsPath, file);\n    const content = fs.readFileSync(filePath, 'utf8');\n    const sectionNum = file.match(/section_(\\d+)/)[1];\n    \n    documents.push({\n      json: {\n        content: content,\n        section: `section_${sectionNum}`,\n        filename: file\n      }\n    });\n  }\n  \n  console.log(`✅ Read ${documents.length} KB files from disk`);\n  return documents;\n  \n} catch (error) {\n  console.log('⚠️ File system access failed, using embedded content');\n  console.log('Error:', error.message);\n  \n  return [{\n    json: {\n      error: 'Could not read files from disk. Please paste content manually in this node.',\n      message: error.message\n    }\n  }];\n}"
      },
      "id": "f293e3c9-db97-44c7-af30-33ba80796898",
      "name": "Load KB Files",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "// Split each document into chunks by ### headers\nconst item = $input.first().json;\nconst content = item.content;\nconst section = item.section;\n\n// Split by ### headings (semantic boundaries)\nconst chunks = content.split(/(?=###\\s)/);\n\nconst processedChunks = [];\n\nchunks.forEach((chunk, index) => {\n  const cleanChunk = chunk.trim();\n  \n  // Only process chunks with substantial content (>100 chars)\n  if (cleanChunk.length > 100) {\n    // Extract heading for metadata\n    const headingMatch = cleanChunk.match(/###\\s+(.+?)(?:\\n|$)/);\n    const heading = headingMatch ? headingMatch[1].trim() : `Part ${index + 1}`;\n    \n    processedChunks.push({\n      json: {\n        pageContent: cleanChunk,\n        metadata: {\n          section: section,\n          chunk_heading: heading,\n          chunk_index: index,\n          content_type: 'reverse_mortgage_kb',\n          source: 'barbara_knowledge_base',\n          created_at: new Date().toISOString()\n        }\n      }\n    });\n  }\n});\n\nconsole.log(`✅ ${section}: Created ${processedChunks.length} chunks`);\n\nreturn processedChunks;"
      },
      "id": "58d5f3f9-bdf9-4859-9a4d-2fbfa6f741c2",
      "name": "Chunk by Headers",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst successful = items.filter(i => i.json.statusCode === 201 || !i.json.error);\nconst failed = items.filter(i => i.json.error || i.json.statusCode !== 201);\n\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log('✅ Knowledge Base Upload Complete');\nconsole.log(`Total chunks processed: ${items.length}`);\nconsole.log(`Successful: ${successful.length}`);\nif (failed.length > 0) {\n  console.log(`Failed: ${failed.length}`);\n}\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\nreturn [{\n  json: {\n    success: true,\n    total: items.length,\n    successful: successful.length,\n    failed: failed.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "800b1ccf-b32c-459f-8a95-b0d70782a7e8",
      "name": "Upload Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        224
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        64,
        224
      ],
      "id": "6d6fb5a1-a5af-4a2b-a9a6-68bca7135e0a",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        200,
        448
      ],
      "id": "c20b0eda-710a-4ff4-99dd-252b74877dbb",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        32,
        432
      ],
      "id": "2850f0aa-dd3b-4bb3-b9a3-60374f0476bf",
      "name": "Embeddings OpenAI"
    }
  ],
  "connections": {
    "Start Upload": {
      "main": [
        [
          {
            "node": "Load KB Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load KB Files": {
      "main": [
        [
          {
            "node": "Chunk by Headers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk by Headers": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Upload Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4ca45576dabef27a95f92525a5f6415fb3e8061f7037b2ec7fb4ba1bb1cb56c0"
  }
}