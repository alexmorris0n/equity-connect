{
  "name": "Call Outcome Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "call-outcome",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Call Outcome Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "call-outcome-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Validate webhook payload\nconst payload = $input.first().json;\n\n// Required fields\nconst requiredFields = ['lead_id', 'outcome', 'phone_number'];\nconst missingFields = requiredFields.filter(field => !payload[field]);\n\nif (missingFields.length > 0) {\n  throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n}\n\n// Validate outcome values\nconst validOutcomes = ['answered', 'no_answer', 'busy', 'voicemail', 'booked', 'not_interested'];\nif (!validOutcomes.includes(payload.outcome)) {\n  throw new Error(`Invalid outcome: ${payload.outcome}. Must be one of: ${validOutcomes.join(', ')}`);\n}\n\nreturn [{\n  json: {\n    lead_id: payload.lead_id,\n    outcome: payload.outcome,\n    phone_number: payload.phone_number,\n    call_duration: payload.call_duration || 0,\n    call_timestamp: payload.call_timestamp || new Date().toISOString(),\n    notes: payload.notes || '',\n    appointment_date: payload.appointment_date || null,\n    appointment_time: payload.appointment_time || null\n  }\n}];"
      },
      "id": "validate-payload",
      "name": "Validate Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "getRows",
        "tableName": "phone_assignments",
        "options": {
          "filter": {
            "conditions": [
              {
                "column": "lead_id",
                "operator": "equals",
                "value": "={{$json.lead_id}}"
              },
              {
                "column": "status",
                "operator": "in",
                "value": "active,booked_locked"
              }
            ]
          }
        }
      },
      "id": "get-assignment",
      "name": "Get Assignment",
      "type": "n8n-nodes-base.table",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-assignment",
              "leftValue": "={{$json.length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "has-assignment",
      "name": "Has Assignment?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Process call outcome based on result\nconst assignment = $('get-assignment').item.json[0];\nconst outcome = $('validate-payload').item.json.outcome;\nconst callDuration = $('validate-payload').item.json.call_duration;\nconst appointmentDate = $('validate-payload').item.json.appointment_date;\nconst appointmentTime = $('validate-payload').item.json.appointment_time;\n\nlet updateData = {\n  call_attempts: assignment.call_attempts + 1,\n  last_call_at: new Date().toISOString()\n};\n\n// Handle different outcomes\nswitch (outcome) {\n  case 'answered':\n    if (!assignment.first_answered_at) {\n      updateData.first_answered_at = new Date().toISOString();\n    }\n    break;\n    \n  case 'booked':\n    updateData.status = 'booked_locked';\n    updateData.booked_at = new Date().toISOString();\n    if (!assignment.first_answered_at) {\n      updateData.first_answered_at = new Date().toISOString();\n    }\n    break;\n    \n  case 'not_interested':\n    updateData.status = 'unreachable';\n    updateData.released_at = new Date().toISOString();\n    break;\n    \n  default:\n    // For no_answer, busy, voicemail - check if max attempts reached\n    if (assignment.call_attempts + 1 >= assignment.max_attempts) {\n      updateData.status = 'unreachable';\n      updateData.released_at = new Date().toISOString();\n    }\n    break;\n}\n\nreturn [{\n  json: {\n    assignment_id: assignment.id,\n    number_id: assignment.number_id,\n    lead_id: assignment.lead_id,\n    broker_id: assignment.broker_id,\n    update_data: updateData,\n    outcome: outcome,\n    call_duration: callDuration,\n    appointment_date: appointmentDate,\n    appointment_time: appointmentTime\n  }\n}];"
      },
      "id": "process-outcome",
      "name": "Process Call Outcome",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "operation": "updateRow",
        "tableName": "phone_assignments",
        "id": "={{$json.assignment_id}}",
        "columns": "={{$json.update_data}}"
      },
      "id": "update-assignment",
      "name": "Update Assignment",
      "type": "n8n-nodes-base.table",
      "typeVersion": 1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "functionCode": "// Update phone number health score\nconst assignment = $('process-outcome').item.json;\nconst outcome = assignment.outcome;\nconst callDuration = assignment.call_duration;\n\n// Calculate health score impact\nlet healthScoreChange = 0;\n\nswitch (outcome) {\n  case 'answered':\n    healthScoreChange = 5; // Positive impact for answered calls\n    break;\n  case 'booked':\n    healthScoreChange = 10; // Strong positive impact for bookings\n    break;\n  case 'not_interested':\n    healthScoreChange = -2; // Slight negative impact\n    break;\n  case 'no_answer':\n  case 'busy':\n  case 'voicemail':\n    healthScoreChange = -1; // Slight negative impact\n    break;\n}\n\n// Adjust based on call duration (longer calls = better)\nif (callDuration > 60) {\n  healthScoreChange += 2;\n} else if (callDuration > 30) {\n  healthScoreChange += 1;\n}\n\nreturn [{\n  json: {\n    number_id: assignment.number_id,\n    health_score_change: healthScoreChange,\n    outcome: outcome,\n    call_duration: callDuration\n  }\n}];"
      },
      "id": "calculate-health-score",
      "name": "Calculate Health Score",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "operation": "getRow",
        "tableName": "phone_pool",
        "id": "={{$json.number_id}}"
      },
      "id": "get-phone-number",
      "name": "Get Phone Number",
      "type": "n8n-nodes-base.table",
      "typeVersion": 1,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "functionCode": "// Update phone number metrics\nconst phoneNumber = $('get-phone-number').item.json[0];\nconst healthData = $('calculate-health-score').item.json;\n\n// Calculate new health score\nconst newHealthScore = Math.max(0, Math.min(100, \n  phoneNumber.health_score + healthData.health_score_change\n));\n\n// Calculate new answer rate\nconst totalCalls = phoneNumber.call_count + 1;\nconst answeredCalls = phoneNumber.answer_rate * phoneNumber.call_count / 100;\nconst newAnsweredCalls = answeredCalls + (healthData.outcome === 'answered' ? 1 : 0);\nconst newAnswerRate = (newAnsweredCalls / totalCalls) * 100;\n\nreturn [{\n  json: {\n    id: phoneNumber.id,\n    health_score: newHealthScore,\n    answer_rate: Math.round(newAnswerRate * 100) / 100,\n    call_count: totalCalls,\n    last_used_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "update-phone-metrics",
      "name": "Update Phone Metrics",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "operation": "updateRow",
        "tableName": "phone_pool",
        "id": "={{$json.id}}",
        "columns": {
          "health_score": "={{$json.health_score}}",
          "answer_rate": "={{$json.answer_rate}}",
          "call_count": "={{$json.call_count}}",
          "last_used_at": "={{$json.last_used_at}}"
        }
      },
      "id": "update-phone-number",
      "name": "Update Phone Number",
      "type": "n8n-nodes-base.table",
      "typeVersion": 1,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "functionCode": "// Create response based on outcome\nconst assignment = $('process-outcome').item.json;\nconst outcome = assignment.outcome;\n\nlet response = {\n  success: true,\n  lead_id: assignment.lead_id,\n  outcome: outcome,\n  message: 'Call outcome processed successfully'\n};\n\n// Add specific messages based on outcome\nswitch (outcome) {\n  case 'answered':\n    response.message = 'Lead answered call - continuing with same number';\n    break;\n  case 'booked':\n    response.message = 'Appointment booked - number locked to lead';\n    response.appointment_date = assignment.appointment_date;\n    response.appointment_time = assignment.appointment_time;\n    break;\n  case 'not_interested':\n    response.message = 'Lead not interested - number released to pool';\n    break;\n  case 'no_answer':\n  case 'busy':\n  case 'voicemail':\n    response.message = 'No answer - will retry with same number';\n    break;\n}\n\nreturn [{\n  json: response\n}];"
      },
      "id": "create-response",
      "name": "Create Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2440, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json)}}",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2660, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify({success: false, error: 'No assignment found for lead'})}}",
        "options": {}
      },
      "id": "no-assignment-response",
      "name": "No Assignment Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 400]
    }
  ],
  "connections": {
    "webhook-trigger": {
      "main": [
        [
          {
            "node": "validate-payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate-payload": {
      "main": [
        [
          {
            "node": "get-assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-assignment": {
      "main": [
        [
          {
            "node": "has-assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has-assignment": {
      "main": [
        [
          {
            "node": "process-outcome",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no-assignment-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-outcome": {
      "main": [
        [
          {
            "node": "update-assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-assignment": {
      "main": [
        [
          {
            "node": "calculate-health-score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculate-health-score": {
      "main": [
        [
          {
            "node": "get-phone-number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-phone-number": {
      "main": [
        [
          {
            "node": "update-phone-metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-phone-metrics": {
      "main": [
        [
          {
            "node": "update-phone-number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-phone-number": {
      "main": [
        [
          {
            "node": "create-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-response": {
      "main": [
        [
          {
            "node": "webhook-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}
