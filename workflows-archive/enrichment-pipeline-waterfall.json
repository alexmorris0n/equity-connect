{
  "name": "Enrichment Pipeline (BatchData â†’ Melissa Waterfall)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "id": "cron",
      "name": "Every 5 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [208, 572]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "pipeline_events"
      },
      "id": "get-events",
      "name": "Get Pending Enrichments",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [432, 572]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-events",
      "name": "Split Events",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [656, 572]
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "leads"
      },
      "id": "get-lead",
      "name": "Get Lead",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [880, 448]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "groq-stage1",
      "name": "Groq Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [1112, 672]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "batchdata-mcp-stage1",
      "name": "BatchData MCP Tool",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [1240, 672]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Enrich contact information (Stage 1 - BatchData):\n\nName: {{ $json.first_name }} {{ $json.last_name }}\nAddress: {{ $json.address_line1 }}, {{ $json.property_city }}, {{ $json.property_state }} {{ $json.property_zip }}\nAPN: {{ $json.apn }}\n\nUse BatchData MCP to find phones and emails with verification.",
        "options": {}
      },
      "id": "batchdata-agent",
      "name": "BatchData Skip-Trace (Stage 1)",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [1104, 448]
    },
    {
      "parameters": {
        "jsCode": "const result = $input.first().json;\nconst lead = $('Get Lead').first().json;\nconst phones = result.phones || [];\nconst emails = result.emails || [];\nconst bestPhone = phones.find(p => p.line_type === 'mobile' && !p.dnc) || phones[0];\nconst bestEmail = emails.find(e => e.deliverable) || emails[0];\nreturn [{json: {lead_id: lead.id, primary_phone: bestPhone?.number || null, primary_email: bestEmail?.address || null, phone_verified: !!(bestPhone && !bestPhone.dnc), email_verified: !!(bestEmail?.deliverable), phones: JSON.stringify(phones), emails: JSON.stringify(emails), enriched_by: 'batchdata', enriched_at: new Date().toISOString(), has_contact: !!(bestPhone || bestEmail)}}];"
      },
      "id": "parse-stage1",
      "name": "Parse BatchData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1456, 448]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.has_contact }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-has-contact",
      "name": "Has Contact?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1680, 448]
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "leads"
      },
      "id": "update-stage1",
      "name": "Update (Stage 1)",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2576, 352]
    },
    {
      "parameters": {
        "jsCode": "const lead = $('Get Lead').first().json;\nreturn [{json: {lead_id: lead.id, full_name: `${lead.first_name || ''} ${lead.last_name || ''}`.trim(), address_line1: lead.address_line1, city: lead.property_city, state: lead.property_state, zip: lead.property_zip}}];"
      },
      "id": "prep-melissa",
      "name": "Prep Melissa",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1904, 544]
    },
    {
      "parameters": {
        "url": "={{ $env.MELISSA_BASE_URL }}/WEB/ContactVerify/doContactVerify",
        "authentication": "headerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "={{ $env.MELISSA_API_KEY }}"
            },
            {
              "name": "format",
              "value": "json"
            },
            {
              "name": "full",
              "value": "={{ $json.full_name }}"
            },
            {
              "name": "a1",
              "value": "={{ $json.address_line1 }}"
            },
            {
              "name": "loc",
              "value": "={{ $json.city }}"
            },
            {
              "name": "admarea",
              "value": "={{ $json.state }}"
            },
            {
              "name": "postal",
              "value": "={{ $json.zip }}"
            }
          ]
        },
        "options": {}
      },
      "id": "melissa-api",
      "name": "Melissa (Stage 2)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2128, 544],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const r = $input.first().json;\nconst lid = $('Prep Melissa').first().json.lead_id;\nconst phone = r.Records?.[0]?.Phone || null;\nconst email = r.Records?.[0]?.Email || null;\nreturn [{json: {lead_id: lid, primary_phone: phone, primary_email: email, phone_verified: !!phone, email_verified: !!email, phones: JSON.stringify(phone ? [{phone, source: 'melissa'}] : []), emails: JSON.stringify(email ? [{email, source: 'melissa'}] : []), enriched_by: 'melissa', enriched_at: new Date().toISOString(), last_melissa_try_at: new Date().toISOString()}}];"
      },
      "id": "parse-melissa",
      "name": "Parse Melissa",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2352, 544]
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "leads"
      },
      "id": "update-stage2",
      "name": "Update (Stage 2)",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2576, 544]
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\nconst data = $input.first().json;\nconst entries = [];\nif (data.primary_phone) { const h = crypto.createHash('md5').update(data.primary_phone.replace(/\\D/g, '')).digest('hex'); entries.push({hash: h, source: data.enriched_by, contact_type: 'phone'}); }\nif (data.primary_email) { const h = crypto.createHash('md5').update(data.primary_email.toLowerCase().trim()).digest('hex'); entries.push({hash: h, source: data.enriched_by, contact_type: 'email'}); }\nif (entries.length === 0) entries.push({hash: 'skip', source: 'none', contact_type: 'none'});\nreturn entries.map(e => ({json: e}));"
      },
      "id": "prep-suppression",
      "name": "Prep Suppression",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2800, 448]
    },
    {
      "parameters": {
        "operation": "upsert"
      },
      "id": "upsert-suppression",
      "name": "Upsert Suppression",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [3024, 448]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/rpc/compute_quality_score",
        "authentication": "headerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"p_lead_id\": \"{{ $('Get Lead').first().json.id }}\"}",
        "options": {}
      },
      "id": "compute-score",
      "name": "Compute Score",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [3248, 448]
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "pipeline_events"
      },
      "id": "mark-complete",
      "name": "Mark Complete",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [3472, 572]
    }
  ],
  "connections": {
    "Every 5 Minutes": {
      "main": [[{"node": "Get Pending Enrichments", "type": "main", "index": 0}]]
    },
    "Get Pending Enrichments": {
      "main": [[{"node": "Split Events", "type": "main", "index": 0}]]
    },
    "Split Events": {
      "main": [[{"node": "Get Lead", "type": "main", "index": 0}]]
    },
    "Get Lead": {
      "main": [[{"node": "BatchData Skip-Trace (Stage 1)", "type": "main", "index": 0}]]
    },
    "BatchData Skip-Trace (Stage 1)": {
      "main": [[{"node": "Parse BatchData", "type": "main", "index": 0}]]
    },
    "Parse BatchData": {
      "main": [[{"node": "Has Contact?", "type": "main", "index": 0}]]
    },
    "Has Contact?": {
      "main": [
        [{"node": "Update (Stage 1)", "type": "main", "index": 0}],
        [{"node": "Prep Melissa", "type": "main", "index": 0}]
      ]
    },
    "Update (Stage 1)": {
      "main": [[{"node": "Prep Suppression", "type": "main", "index": 0}]]
    },
    "Prep Melissa": {
      "main": [[{"node": "Melissa (Stage 2)", "type": "main", "index": 0}]]
    },
    "Melissa (Stage 2)": {
      "main": [[{"node": "Parse Melissa", "type": "main", "index": 0}]]
    },
    "Parse Melissa": {
      "main": [[{"node": "Update (Stage 2)", "type": "main", "index": 0}]]
    },
    "Update (Stage 2)": {
      "main": [[{"node": "Prep Suppression", "type": "main", "index": 0}]]
    },
    "Prep Suppression": {
      "main": [[{"node": "Upsert Suppression", "type": "main", "index": 0}]]
    },
    "Upsert Suppression": {
      "main": [[{"node": "Compute Score", "type": "main", "index": 0}]]
    },
    "Compute Score": {
      "main": [[{"node": "Mark Complete", "type": "main", "index": 0}]]
    },
    "Mark Complete": {
      "main": [[{"node": "Split Events", "type": "main", "index": 0}]]
    },
    "Groq Chat Model": {
      "main": [],
      "ai_languageModel": [[{"node": "BatchData Skip-Trace (Stage 1)", "type": "ai_languageModel", "index": 0}]]
    },
    "BatchData MCP Tool": {
      "main": [],
      "ai_tool": [[{"node": "BatchData Skip-Trace (Stage 1)", "type": "ai_tool", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "pinData": {}
}
