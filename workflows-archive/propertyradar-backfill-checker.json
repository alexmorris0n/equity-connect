{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "trigger-every-2h",
      "name": "Every 2 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        208,
        400
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "brokers",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "active"
            }
          ]
        }
      },
      "id": "fetch-active-brokers",
      "name": "Fetch Active Brokers",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        432,
        400
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "split-brokers",
      "name": "Split Into Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        640,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/broker_successful_enrichments_today",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"p_broker\": $json.id } }}",
        "options": {}
      },
      "id": "count-enrichments",
      "name": "Count Successful Enrichments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        864,
        416
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/broker_pending_enrichments_today",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"p_broker\": $('Split Into Batches').first().json.id } }}",
        "options": {}
      },
      "id": "count-pending",
      "name": "Count Pending Enrichments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        864,
        608
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge successful and pending counts to calculate true shortfall\nconst broker = $('Split Into Batches').first().json;\nconst enrichedCount = parseInt($('Count Successful Enrichments').first().json) || 0;\nconst pendingCount = parseInt($('Count Pending Enrichments').first().json) || 0;\nconst dailyCapacity = broker.daily_lead_capacity || 250;\n\n// In-flight total = enriched + still being processed\nconst inFlightTotal = enrichedCount + pendingCount;\n\n// True shortfall accounts for leads that are still enriching\nconst trueShortfall = Math.max(0, dailyCapacity - inFlightTotal);\n\nconsole.log('=================================');\nconsole.log(`Backfill Check: ${broker.company_name}`);\nconsole.log(`Daily Capacity: ${dailyCapacity}`);\nconsole.log(`Enriched: ${enrichedCount}`);\nconsole.log(`Pending: ${pendingCount}`);\nconsole.log(`In-Flight Total: ${inFlightTotal}`);\nconsole.log(`True Shortfall: ${trueShortfall}`);\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    broker_id: broker.id,\n    broker_name: broker.company_name,\n    daily_capacity: dailyCapacity,\n    enriched_today: enrichedCount,\n    pending_today: pendingCount,\n    in_flight_total: inFlightTotal,\n    shortfall: trueShortfall,\n    needs_backfill: trueShortfall > 10\n  }\n}];"
      },
      "id": "calculate-shortfall",
      "name": "Merge Counts & Calculate Shortfall",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        416
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.shortfall }}",
              "operation": "larger",
              "value2": 10
            }
          ]
        },
        "options": {}
      },
      "id": "check-threshold",
      "name": "Shortfall > 10?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1328,
        416
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://n8n.instaroute.com/webhook/c215e71d-f2d8-415a-b24a-a1662e3f1e2f",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"broker_id\": $json.broker_id, \"override_count\": $json.shortfall, \"reason\": \"backfill_q2h\" } }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "trigger-webhook",
      "name": "Trigger Pull Worker via Webhook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1552,
        416
      ],
      "notes": "Calls pull worker webhook with backfill parameters"
    },
    {
      "parameters": {
        "jsCode": "// Log successful backfill execution\nconst backfillData = $('Merge Counts & Calculate Shortfall').first().json;\n\nconsole.log('✓ Backfill triggered');\nconsole.log(`  Broker: ${backfillData.broker_name}`);\nconsole.log(`  Will pull: ${backfillData.shortfall} additional leads`);\n\nreturn [{ json: backfillData }];"
      },
      "id": "log-backfill-success",
      "name": "Log Backfill Triggered",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        416
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log no backfill needed\nconst data = $input.first().json;\n\nconsole.log(`○ No backfill needed: ${data.broker_name}`);\nconsole.log(`  Shortfall: ${data.shortfall} (threshold: 10)`);\n\nreturn [{ json: data }];"
      },
      "id": "log-no-backfill",
      "name": "Log No Backfill Needed",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1552,
        624
      ]
    },
    {
      "parameters": {},
      "id": "loop-next",
      "name": "Next Broker",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        864,
        256
      ]
    }
  ],
  "connections": {
    "Every 2 Hours": {
      "main": [
        [
          {
            "node": "Fetch Active Brokers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Brokers": {
      "main": [
        [
          {
            "node": "Split Into Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Batches": {
      "main": [
        [
          {
            "node": "Next Broker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Count Successful Enrichments",
            "type": "main",
            "index": 0
          },
          {
            "node": "Count Pending Enrichments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Count Successful Enrichments": {
      "main": [
        [
          {
            "node": "Merge Counts & Calculate Shortfall",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Count Pending Enrichments": {
      "main": [
        [
          {
            "node": "Merge Counts & Calculate Shortfall",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Counts & Calculate Shortfall": {
      "main": [
        [
          {
            "node": "Shortfall > 10?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shortfall > 10?": {
      "main": [
        [
          {
            "node": "Trigger Pull Worker via Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log No Backfill Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Pull Worker via Webhook": {
      "main": [
        [
          {
            "node": "Log Backfill Triggered",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Backfill Triggered": {
      "main": [
        [
          {
            "node": "Split Into Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log No Backfill Needed": {
      "main": [
        [
          {
            "node": "Split Into Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4ca45576dabef27a95f92525a5f6415fb3e8061f7037b2ec7fb4ba1bb1cb56c0"
  }
}