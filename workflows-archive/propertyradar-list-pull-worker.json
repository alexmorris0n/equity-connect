{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                5,
                4,
                3,
                2,
                1
              ],
              "triggerAtHour": 6
            }
          ]
        }
      },
      "id": "d5ccee7e-d5ec-4260-af5d-cbc6f61d5b36",
      "name": "Daily Trigger (6am)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        656,
        -352
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "brokers",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "active"
            }
          ]
        }
      },
      "id": "2dddb548-c5ae-4b42-978c-f8164679f306",
      "name": "Fetch Active Brokers",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        864,
        -352
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare broker state for list pull\n// Support backfill overrides via workflow parameters OR webhook\nconst broker = $input.first().json;\nconst sessionId = $execution.id;\n\nif (!broker.propertyradar_list_id) {\n  throw new Error(`Broker ${broker.company_name} missing propertyradar_list_id. Create a dynamic list in PropertyRadar first.`);\n}\n\n// Check for backfill override parameters from multiple sources:\n// 1. Webhook data (merged from previous node)\n// 2. Execute Workflow parameters\n// 3. Default to daily pull\nconst override = broker.webhook_override_count || $parameter.override_count || null;\nconst reason = broker.webhook_reason || $parameter.reason || 'daily';\nconst currentOffset = broker.propertyradar_offset || 0;\nconst dailyCapacity = override || broker.daily_lead_capacity || 250;\n\nconsole.log('=================================');\nconsole.log(`PropertyRadar Pull: ${broker.company_name}`);\nconsole.log(`Reason: ${reason}`);\nconsole.log(`Execution: ${sessionId}`);\nconsole.log(`List ID: ${broker.propertyradar_list_id}`);\nconsole.log(`Daily Capacity: ${dailyCapacity}${override ? ' (BACKFILL OVERRIDE)' : ''}`);\nconsole.log(`Starting Offset: ${currentOffset}`);\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    broker_id: broker.id,\n    broker_name: broker.company_name,\n    list_id: broker.propertyradar_list_id,\n    daily_capacity: dailyCapacity,\n    current_offset: currentOffset,\n    pull_reason: reason,\n    is_backfill: !!override\n  }\n}];"
      },
      "id": "78449e11-9ccb-4d3d-a1c5-9c12b42d9ed5",
      "name": "Prepare Broker State",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        -144
      ]
    },
    {
      "parameters": {
        "url": "=https://api.propertyradar.com/v1/lists/{{ $json.list_id }}/items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Start",
              "value": "={{ $json.current_offset }}"
            },
            {
              "name": "Limit",
              "value": "={{ $json.daily_capacity }}"
            }
          ]
        },
        "options": {}
      },
      "id": "adbe54fa-d616-439e-9c5b-f4378ad677bb",
      "name": "Get RadarIDs from List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        128
      ],
      "credentials": {
        "httpBearerAuth": {
          "id": "81i7WbQilIMSh4E3",
          "name": "PropertyRadar"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract RadarIDs from list response\nconst listResponse = $input.first().json;\nconst brokerState = $('Prepare Broker State').first().json;\n\n// PropertyRadar returns: { results: [{ RadarID: \"P6ABBF32\" }, ...] }\nconst results = listResponse.results || [];\nconst radarIds = results.map(item => item.RadarID).filter(Boolean);\n\nif (radarIds.length === 0) {\n  throw new Error('No properties in PropertyRadar list');\n}\n\nconsole.log(`Got ${radarIds.length} RadarIDs from list (${listResponse.totalResultCount} total available)`);\n\nreturn [{\n  json: {\n    ...brokerState,\n    radar_ids: radarIds,\n    original_count: radarIds.length,\n    total_available: listResponse.totalResultCount\n  }\n}];"
      },
      "id": "04a6db8a-b6da-4a67-9687-4a1b762efd66",
      "name": "Extract RadarIDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        128
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/filter_new_radar_ids",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"ids\": $json.radar_ids } }}",
        "options": {}
      },
      "id": "44573cc5-a441-488f-86b1-867834a30778",
      "name": "Filter New RadarIDs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1520,
        128
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Check filtered results - handle empty input when all are duplicates\nconst allItems = $input.all();\nconst brokerState = $('Extract RadarIDs').first().json;\n\n// Extract new IDs\nconst newIds = allItems.map(item => item.json.radar_id).filter(Boolean);\n\n// Check if ALL are duplicates (no new IDs)\nif (newIds.length === 0) {\n  const saved = (brokerState.original_count * 0.75).toFixed(2);\n  console.log(`⚠️ All ${brokerState.original_count} RadarIDs already exist (saved $${saved})`);\n  console.log('  Skipping to offset update...');\n  \n  return [{\n    json: {\n      ...brokerState,\n      radar_ids: [],\n      count: 0,\n      offset_increment: brokerState.original_count,\n      skip_processing: true,  // ← Set to TRUE\n      all_duplicates: true,\n      duplicates_skipped: brokerState.original_count,\n      cost_saved: parseFloat(saved)\n    }\n  }];\n}\n\n// Normal case: we have new IDs to process\nconst duplicates = brokerState.original_count - newIds.length;\nconst saved = (duplicates * 0.75).toFixed(2);\n\nconsole.log(`Processing ${newIds.length} new IDs (skipped ${duplicates} dupes, saved $${saved})`);\n\nreturn [{\n  json: {\n    ...brokerState,\n    radar_ids: newIds,\n    count: newIds.length,\n    duplicates_skipped: duplicates,\n    cost_saved: parseFloat(saved),\n    skip_processing: false,\n    offset_increment: brokerState.original_count  // ← ADD THIS LINE\n  }\n}];"
      },
      "id": "5c589dd5-51f0-4085-843c-76aa924f0a5f",
      "name": "Check Filtered Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        368
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/broker_leads_today",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"p_broker\": $json.broker_id } }}",
        "options": {}
      },
      "id": "2d408128-9886-46bf-8f43-48d59d6eb25a",
      "name": "Get Broker Leads Today",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1088,
        352
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Trim to remaining daily capacity\nconst brokerState = $('Check Filtered Results').first().json;\nconst alreadyPulled = parseInt($input.first().json) || 0;\nconst remaining = Math.max(0, brokerState.daily_capacity - alreadyPulled);\n\nif (remaining === 0) {\n  throw new Error(`Broker ${brokerState.broker_name} already at capacity (${alreadyPulled}/${brokerState.daily_capacity})`);\n}\n\nconst trimmed = brokerState.radar_ids.slice(0, remaining);\n\nconsole.log(`Capacity: ${alreadyPulled} pulled today, ${remaining} remaining → will pull ${trimmed.length}`);\n\nreturn [{\n  json: {\n    ...brokerState,\n    radar_ids: trimmed,\n    count: trimmed.length,\n    already_pulled_today: alreadyPulled,\n    remaining_capacity: remaining\n  }\n}];"
      },
      "id": "6dfbb289-b397-455f-992f-3d4436de9784",
      "name": "Trim to Remaining Capacity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        352
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.propertyradar.com/v1/properties",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Purchase",
              "value": "0"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({Criteria: [{name: 'RadarID', value: $json.radar_ids}]}) }}",
        "options": {}
      },
      "id": "79eef1ff-d2f2-4f9c-a003-2482d1b4b986",
      "name": "Preview Purchase (Purchase=0)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        752
      ],
      "credentials": {
        "httpBearerAuth": {
          "id": "81i7WbQilIMSh4E3",
          "name": "PropertyRadar"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log preview results and pass through state\nconst preview = $input.first().json;\nconst brokerState = $('Trim to Remaining Capacity').first().json;\n\nconsole.log(`Preview: ${preview.totalResultCount} properties, Cost: $${preview.totalCost}`);\n\nif (preview.totalResultCount === 0) {\n  throw new Error('Preview returned 0 properties. Check RadarIDs.');\n}\n\nreturn [{\n  json: {\n    ...brokerState,\n    preview_count: preview.totalResultCount,\n    preview_cost: parseFloat(preview.totalCost || 0)\n  }\n}];"
      },
      "id": "105a4f72-e5f8-4ff7-8e07-3f3613177f9b",
      "name": "Check Preview",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        752
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.propertyradar.com/v1/properties",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Purchase",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({Criteria: [{name: 'RadarID', value: $json.radar_ids}]}) }}",
        "options": {
          "timeout": 120000
        }
      },
      "id": "5212dd2b-a42c-470f-9199-31af2f0f2845",
      "name": "Purchase Properties (Purchase=1)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1088,
        752
      ],
      "credentials": {
        "httpBearerAuth": {
          "id": "81i7WbQilIMSh4E3",
          "name": "PropertyRadar"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse PropertyRadar results and compute dedup keys\nconst response = $input.first().json;\nconst properties = response.results || [];\nconst brokerState = $('Trim to Remaining Capacity').first().json;\n\nif (properties.length === 0) {\n  console.log('No properties returned from purchase');\n  return [];\n}\n\n// Simple hash function (crypto module not allowed in n8n)\nfunction simpleHash(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString(36);\n}\n\nfunction makeAddrHash(line1, city, state, zip) {\n  const key = `${(line1 || '').trim().toUpperCase()}|${(city || '').trim().toUpperCase()}|${(state || '').trim().toUpperCase()}|${(zip || '').slice(0, 5)}`;\n  return simpleHash(key);\n}\n\nconst leads = properties.map(prop => {\n  const hash = makeAddrHash(prop.Address, prop.City, prop.State, prop.ZipFive);\n\n  return {\n    radar_id: prop.RadarID,\n    apn: prop.APN || null,\n    county_fips: prop.FIPS || null,\n    addr_hash: hash,\n    property_address: prop.Address,\n    property_city: prop.City,\n    property_state: prop.State,\n    property_zip: prop.ZipFive,\n    property_value: prop.AVM,\n    estimated_equity: prop.AvailableEquity,\n    age: prop.Age || null,\n    owner_occupied: prop.isSameMailingOrExempt === 1,\n    phone_available: (prop.PhoneAvailability || 0) > 0,\n    email_available: (prop.EmailAvailability || 0) > 0,\n    primary_email: prop.Email || null,  // ← NEW: Extract actual email\n    email_verified: !!(prop.Email),     // ← NEW: Mark as verified if present\n    assigned_broker_id: brokerState.broker_id,\n    source: 'propertyradar',\n    radar_property_data: prop,\n    radar_api_version: 'v1'\n  };\n});\n\nconsole.log('=================================');\nconsole.log('PropertyRadar Purchase Complete');\nconsole.log(`Broker: ${brokerState.broker_name}`);\nconsole.log(`Purchased: ${properties.length} properties`);\nconsole.log(`With emails: ${properties.filter(p => p.Email).length}`);\nconsole.log(`Cost: $${response.totalCost}`);\nconsole.log(`Parsed with address hash dedup keys`);\nconsole.log('=================================');\n\nreturn leads.map(lead => ({ json: lead }));"
      },
      "id": "32bfc03f-e416-467a-aee2-f3e6e504236c",
      "name": "Parse & Hash Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        752
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/upsert_lead_from_radar",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"p\": {\n    \"radar_id\": $json.radar_id,\n    \"apn\": $json.apn,\n    \"county_fips\": $json.county_fips,\n    \"addr_hash\": $json.addr_hash,\n    \"address_line1\": $json.property_address,\n    \"city\": $json.property_city,\n    \"state\": $json.property_state,\n    \"postal_code\": $json.property_zip,\n    \"property_value\": $json.property_value,\n    \"estimated_equity\": $json.estimated_equity,\n    \"age\": $json.age,\n    \"owner_occupied\": $json.owner_occupied,\n    \"phone_available\": $json.phone_available,\n    \"email_available\": $json.email_available,\n    \"assigned_broker_id\": $json.assigned_broker_id,\n    \"radar_property_data\": $json.radar_property_data,\n    \"radar_api_version\": $json.radar_api_version,\n    \"source\": \"propertyradar\"\n  }\n}\n}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "4c492365-63a1-4fb0-a811-750b628137cc",
      "name": "Upsert Lead to Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        1008
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "tableId": "pipeline_events",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "event_type",
              "fieldValue": "enrich_propertyradar"
            },
            {
              "fieldId": "lead_id",
              "fieldValue": "={{ $json.data }}"
            },
            {
              "fieldId": "broker_id",
              "fieldValue": "={{ $('Check Filtered Results').first().json.broker_id }}"
            },
            {
              "fieldId": "event_data",
              "fieldValue": "={{ JSON.stringify({ radar_id: $input.item.json.radar_id, source: 'propertyradar_pull' }) }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "pending"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        896,
        1008
      ],
      "id": "6c9e6c53-0b68-47f0-ab35-0aee9fb8a23d",
      "name": "Que for Enrichment",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1088,
        -352
      ],
      "id": "1d6d1bae-00ef-4a0a-a965-5d0a8fb4afb5",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all upserted leads back to single item for offset update\nconst allLeads = $input.all();\nconst brokerState = $('Check Filtered Results').first().json;\n\nconsole.log(`Aggregated ${allLeads.length} upserted leads for offset update`);\n\nreturn [{\n  json: {\n    broker_id: brokerState.broker_id,\n    leads_inserted: allLeads.length,\n    offset_increment: brokerState.offset_increment  // ← USE THIS instead of leads_inserted\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        1008
      ],
      "id": "69f8e921-2763-4e33-a7fa-734919d89413",
      "name": "Aggregate All"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "76fc1991-9e5a-4483-a35a-c303d5c4f1cf",
              "leftValue": "={{ $json.skip_processing }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        880,
        368
      ],
      "id": "1ca3c0f7-2460-4bca-b900-a4c2140ad4a7",
      "name": "Should Process?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "996546e2-d1a1-4377-9e03-4b75163433b9",
              "name": "broker_id",
              "value": "={{ $json.broker_id }}",
              "type": "string"
            },
            {
              "id": "53bd715f-3225-4b49-b360-e9a007eb3905",
              "name": "broker_name",
              "value": "={{ $json.broker_name }}",
              "type": "string"
            },
            {
              "id": "ff0ceabe-0b9b-4809-afa6-3a1e52bc0e9a",
              "name": "daily_capacity",
              "value": "={{ $json.daily_capacity }}",
              "type": "number"
            },
            {
              "id": "fb6c31b3-f769-4352-882e-9d59f4582d6d",
              "name": "current_offset",
              "value": "={{ $json.current_offset }}",
              "type": "number"
            },
            {
              "id": "d854f8a1-c7ed-42e0-8480-eff5ffd6895d",
              "name": "radar_ids",
              "value": "={{ $json.radar_ids }}",
              "type": "array"
            },
            {
              "id": "924ef5cd-9c96-44ef-a203-0b979e8b37b6",
              "name": "total_available",
              "value": "={{ $json.total_available }}",
              "type": "number"
            },
            {
              "id": "a9541678-e83c-44cf-bdc9-55a7572c5052",
              "name": "original_count",
              "value": "={{ $json.original_count }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1088,
        128
      ],
      "id": "61e5581c-d4cc-464c-a289-31f44ef96738",
      "name": "Edit Fields"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1504,
        -368
      ],
      "id": "114c6744-3e86-41fd-ba1d-a7d4089ee503",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "c215e71d-f2d8-415a-b24a-a1662e3f1e2f",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        656,
        -144
      ],
      "id": "bc9ae756-8670-402b-ad7f-7da6298024a0",
      "name": "Webhook",
      "webhookId": "c215e71d-f2d8-415a-b24a-a1662e3f1e2f"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "brokers",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.body.broker_id }}"
            }
          ]
        }
      },
      "id": "487c7c7a-6ef2-43ad-8c9f-a9716fe46fec",
      "name": "Fetch Single Broker",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        864,
        -144
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge broker data with webhook parameters\nconst broker = $input.first().json;\nconst webhookData = $('Webhook').first().json.body;\n\nreturn [{\n  json: {\n    id: broker.id,\n    company_name: broker.company_name,\n    propertyradar_list_id: broker.propertyradar_list_id,\n    propertyradar_offset: broker.propertyradar_offset,\n    daily_lead_capacity: broker.daily_lead_capacity,\n    status: broker.status,\n    webhook_override_count: webhookData.override_count,\n    webhook_reason: webhookData.reason\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        -144
      ],
      "id": "b98a9bc7-77dc-437b-baf7-746be50aaedd",
      "name": "Merge Webhook Params"
    },
    {
      "parameters": {
        "jsCode": "// Decide if we should loop or stop\nconst prepareBrokerData = $('Prepare Broker State').first().json;\nconst isBackfill = prepareBrokerData.is_backfill;\n\nif (isBackfill) {\n  console.log('✓ Backfill complete - stopping workflow');\n  return []; // Return empty to stop workflow\n}\n\n// Daily run - continue looping\nreturn [$input.first()];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        1008
      ],
      "id": "6bae1876-a67e-447b-87f3-15b247d8bf70",
      "name": "Check If Should Loop"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/update_broker_offset",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"p_broker_id\": $json.broker_id,\n  \"p_increment\": $json.offset_increment\n}\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1088,
        528
      ],
      "id": "4b6da960-beac-41e1-8a66-ed4fa8d6292a",
      "name": "Update Offset (Skip Processing)",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/update_broker_offset",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"p_broker_id\": $json.broker_id,\n  \"p_increment\": $json.offset_increment\n}\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1296,
        1008
      ],
      "id": "1b6a1833-ac3d-4035-a3bd-4f6f680f7734",
      "name": "Update Offset (Processing Path)",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    }
  ],
  "connections": {
    "Daily Trigger (6am)": {
      "main": [
        [
          {
            "node": "Fetch Active Brokers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Brokers": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Broker State": {
      "main": [
        [
          {
            "node": "Get RadarIDs from List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get RadarIDs from List": {
      "main": [
        [
          {
            "node": "Extract RadarIDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract RadarIDs": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter New RadarIDs": {
      "main": [
        [
          {
            "node": "Check Filtered Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Filtered Results": {
      "main": [
        [
          {
            "node": "Should Process?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Broker Leads Today": {
      "main": [
        [
          {
            "node": "Trim to Remaining Capacity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trim to Remaining Capacity": {
      "main": [
        [
          {
            "node": "Preview Purchase (Purchase=0)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preview Purchase (Purchase=0)": {
      "main": [
        [
          {
            "node": "Check Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Preview": {
      "main": [
        [
          {
            "node": "Purchase Properties (Purchase=1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Purchase Properties (Purchase=1)": {
      "main": [
        [
          {
            "node": "Parse & Hash Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Hash Results": {
      "main": [
        [
          {
            "node": "Upsert Lead to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Lead to Supabase": {
      "main": [
        [
          {
            "node": "Que for Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Que for Enrichment": {
      "main": [
        [
          {
            "node": "Aggregate All",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Broker State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate All": {
      "main": [
        [
          {
            "node": "Update Offset (Processing Path)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Process?": {
      "main": [
        [
          {
            "node": "Get Broker Leads Today",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Offset (Skip Processing)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Filter New RadarIDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Fetch Single Broker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Single Broker": {
      "main": [
        [
          {
            "node": "Merge Webhook Params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Webhook Params": {
      "main": [
        [
          {
            "node": "Prepare Broker State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Should Loop": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Offset (Skip Processing)": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Offset (Processing Path)": {
      "main": [
        [
          {
            "node": "Check If Should Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Webhook": [
      {
        "headers": {
          "host": "n8n.instaroute.com",
          "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
          "content-type": "application/json",
          "user-agent": "axios/1.12.0",
          "content-length": "96",
          "x-forwarded-for": "10.124.6.10",
          "x-forwarded-proto": "https",
          "x-envoy-external-address": "10.124.6.10",
          "x-request-id": "957caa04-b75a-4c4d-a1ae-c5c66d0185d0",
          "x-envoy-attempt-count": "1"
        },
        "params": {},
        "query": {},
        "body": {
          "broker_id": "6a3c5ed5-664a-4e13-b019-99fe8db74174",
          "override_count": 44,
          "reason": "backfill_q2h"
        },
        "webhookUrl": "https://n8n.instaroute.com:5678/webhook/c215e71d-f2d8-415a-b24a-a1662e3f1e2f",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4ca45576dabef27a95f92525a5f6415fb3e8061f7037b2ec7fb4ba1bb1cb56c0"
  }
}