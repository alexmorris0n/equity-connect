{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 6
            }
          ]
        }
      },
      "id": "c2e75f0b-8bf2-4874-9b87-e9189e041f8c",
      "name": "Daily Trigger (6am)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1808,
        624
      ]
    },
    {
      "parameters": {
        "jsCode": "// Initialize daily pull session\nconst sessionId = `pr-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\nconsole.log('=================================');\nconsole.log('PropertyRadar Daily Pull Started');\nconsole.log(`Session ID: ${sessionId}`);\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    started_at: new Date().toISOString(),\n    source: 'propertyradar'\n  }\n}];"
      },
      "id": "13a31616-4656-4717-b98b-294d1e938617",
      "name": "Initialize Session",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1584,
        624
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "brokers",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "active"
            }
          ]
        }
      },
      "id": "f4a246d7-b658-4a0e-93c2-9e434431bded",
      "name": "Fetch Active Brokers",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1360,
        624
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract broker info and initialize pull tracking\nconst broker = $input.first().json;\nconst sessionId = $('Initialize Session').first().json.session_id;\n\nconsole.log(`\\n--- Processing Broker: ${broker.company_name} ---`);\nconsole.log(`Daily Lead Capacity: ${broker.daily_lead_capacity}`);\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    broker_id: broker.id,\n    broker_name: broker.company_name,\n    daily_target: broker.daily_lead_capacity || 250,\n    leads_pulled_today: 0,\n    source: 'propertyradar'\n  }\n}];"
      },
      "id": "e6d1d8a7-2249-4f25-91ed-514789aa0eb4",
      "name": "Init Broker Pull",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1136,
        624
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "broker_territories",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "broker_id",
              "condition": "eq",
              "keyValue": "={{ $json.broker_id }}"
            },
            {
              "keyName": "active",
              "condition": "eq",
              "keyValue": "true"
            }
          ]
        }
      },
      "id": "38249ca8-7b52-492e-81ba-93cd1c848776",
      "name": "Fetch Broker Territories",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -912,
        528
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get current ZIP and check if we've hit daily target\nconst territory = $input.first().json;\nconst brokerState = $('Init Broker Pull').first().json;\n\n// Check if we've already hit target\nif (brokerState.leads_pulled_today >= brokerState.daily_target) {\n  console.log(`Target reached: ${brokerState.leads_pulled_today}/${brokerState.daily_target}`);\n  return [{\n    json: {\n      ...brokerState,\n      skip_remaining: true,\n      reason: 'daily_target_reached'\n    }\n  }];\n}\n\n// Calculate query signature for bookmark (simple string hash)\nconst querySigData = `${territory.broker_id}|${territory.zip_code}|age62|eq150k|avm400k-3m|cltv60`;\nconst querySig = querySigData.split('').reduce((hash, char) => {\n  return ((hash << 5) - hash) + char.charCodeAt(0) | 0;\n}, 0).toString(36);\n\nconsole.log(`Processing ZIP ${territory.zip_code} (${territory.market_name})`);\n\nreturn [{\n  json: {\n    ...brokerState,\n    current_zip: territory.zip_code,\n    market_name: territory.market_name,\n    territory_id: territory.id,\n    query_sig: querySig\n  }\n}];"
      },
      "id": "1bb81e32-b55d-4932-aea9-c3395081e4d6",
      "name": "Prepare ZIP Pull",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        168
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.skip_remaining }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "4bc5ae5c-2ce7-408e-baf6-81bd29ee73e4",
      "name": "Target Reached?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -240,
        168
      ]
    },
    {
      "parameters": {
        "jsCode": "// Skip to end of broker processing\nconsole.log('Skipping remaining ZIPs - daily target reached');\nreturn [$input.first().json];"
      },
      "id": "66668b3e-dabe-4eec-9425-d04102c8a348",
      "name": "Skip to End",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2672,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Merge bookmark data with current state\nconst currentState = $('Prepare ZIP Pull').first().json;\nconst bookmark = $input.first().json;\n\nreturn [{\n  json: {\n    ...currentState,\n    bookmark_id: bookmark.id,\n    last_page: bookmark.last_page_fetched || 0,\n    start_offset: (bookmark.last_page_fetched || 0) * 50\n  }\n}];"
      },
      "id": "812dc18a-fd83-4513-bc8d-6ebe08045352",
      "name": "Merge Bookmark",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        264
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.propertyradar.com/v1/properties",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Purchase",
              "value": "1"
            },
            {
              "name": "Limit",
              "value": "50"
            },
            {
              "name": "Start",
              "value": "={{ $json.start_offset }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({Criteria: [{name: 'ZipFive', value: [$json.current_zip]}, {name: 'Age', value: [[62, null]]}, {name: 'AvailableEquity', value: [[150000, null]]}, {name: 'EquityPercent', value: [[40, null]]}, {name: 'isSameMailingOrExempt', value: [1]}, {name: 'PropertyType', value: [{name: 'PType', value: ['SFR', 'DPX', 'TPX', 'FPX', 'CND']}]}, {name: 'AVM', value: [[400000, 3000000]]}, {name: 'CLTV', value: [[null, 60]]}]}) }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "15e30dbc-65de-489f-905d-1a672f1d65f4",
      "name": "PropertyRadar API Call",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        432,
        264
      ],
      "credentials": {
        "httpBearerAuth": {
          "id": "81i7WbQilIMSh4E3",
          "name": "PropertyRadar"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract PropertyRadar results and check for duplicates\nconst response = $input.first().json;\nconst results = response.results || [];\nconst state = $('Merge Bookmark').first().json;\n\nconsole.log(`API Response: ${results.length} records, Total Cost: $${response.totalCost}, Total Available: ${response.totalResultCount}`);\n\nif (results.length === 0) {\n  console.log('No more results for this ZIP');\n  return [{\n    json: {\n      ...state,\n      no_results: true,\n      radar_ids: []\n    }\n  }];\n}\n\n// Extract radar_ids for dedup check\nconst radarIds = results.map(r => r.RadarID);\n\nreturn [{\n  json: {\n    ...state,\n    radar_ids: radarIds,\n    raw_results: results,\n    result_count: results.length,\n    total_available: response.totalResultCount,\n    api_cost: parseFloat(response.totalCost || 0)\n  }\n}];"
      },
      "id": "53b6b12b-724c-4a63-b769-b78cf4aa1cc3",
      "name": "Extract Radar IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        264
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "5f1ab34e-ff14-4e48-8b3c-d49d128f4528",
              "leftValue": "={{ $json }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9dc2d17a-ed9d-460f-bdfb-0d01841d879e",
      "name": "Already Seen?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1104,
        264
      ]
    },
    {
      "parameters": {
        "jsCode": "// Stop-when-known triggered - these leads already processed\nconst state = $('Extract Radar IDs').first().json;\n\nconsole.log(`Stop-when-known: ${state.radar_ids.length} leads already seen in ZIP ${state.current_zip}`);\n\nreturn [{\n  json: {\n    ...state,\n    stopped: true,\n    reason: 'already_seen'\n  }\n}];"
      },
      "id": "bf07ec35-2477-48a6-8518-0e06dafd1c55",
      "name": "Stop (Already Seen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2672,
        192
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse PropertyRadar results into lead format\nconst state = $('Extract Radar IDs').first().json;\nconst results = state.raw_results;\nconst brokerId = state.broker_id;\n\n// Simple hash function (no crypto module needed)\nfunction simpleHash(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString(36);\n}\n\nconst leads = results.map(prop => {\n  // Compute address hash for fallback dedup\n  const line1 = (prop.Address || '').toUpperCase().trim();\n  const city = (prop.City || '').toUpperCase().trim();\n  const stateCode = (prop.State || '').toUpperCase().trim();\n  const zip = (prop.ZipFive || '').substring(0, 5);\n  const normalized = `${line1}|${city}|${stateCode}|${zip}`;\n  const addrHash = simpleHash(normalized);\n\n  return {\n    radar_id: prop.RadarID,\n    property_address: prop.Address,\n    property_city: prop.City,\n    property_state: prop.State,\n    property_zip: prop.ZipFive,\n    property_value: prop.AVM,\n    estimated_equity: prop.AvailableEquity,\n    age: prop.Age || null,\n    owner_occupied: prop.isSameMailingOrExempt === 1,\n    apn: prop.APN || null,\n    county_fips: prop.FIPS || null,\n    addr_hash: addrHash,\n    assigned_broker_id: brokerId,\n    source: 'propertyradar',\n    radar_property_data: prop,\n    radar_api_version: 'v1'\n  };\n});\n\nconsole.log(`Parsed ${leads.length} PropertyRadar leads`);\n\nreturn leads.map(lead => ({ json: lead }));"
      },
      "id": "71b3c7e7-7565-47c9-8b5e-ff95496fa9d3",
      "name": "Parse PropertyRadar Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        384
      ]
    },
    {
      "parameters": {
        "tableId": "pipeline_events",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "event_type",
              "fieldValue": "lead_created"
            },
            {
              "fieldId": "lead_id",
              "fieldValue": "={{ $json.data }}"
            },
            {
              "fieldId": "broker_id",
              "fieldValue": "={{ $('Init Broker Pull').first().json.broker_id }}"
            },
            {
              "fieldId": "event_data",
              "fieldValue": "={{ JSON.stringify({source: 'propertyradar', zip: $('Prepare ZIP Pull').first().json.current_zip}) }}"
            }
          ]
        }
      },
      "id": "017338b1-1bc2-4762-8548-c0129bba9b65",
      "name": "Queue for Enrichment",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1776,
        384
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Update lead count AND prepare source event data\nconst state = $('Prepare ZIP Pull').first().json;\nconst extractState = $('Extract Radar IDs').first().json;\nconst mergeState = $('Merge Bookmark').first().json;\nconst leadsInserted = $input.all().length; // Count all 50 items\nconst newCount = state.leads_pulled_today + leadsInserted;\n\nconsole.log(`Progress: ${newCount}/${state.daily_target} leads (added ${leadsInserted})`);\n\nreturn [{\n  json: {\n    // Updated state\n    ...state,\n    leads_pulled_today: newCount,\n    \n    // Source event data for next node\n    source: 'propertyradar',\n    pull_params: {\n      broker_id: extractState.broker_id,\n      zip: extractState.current_zip,\n      query_sig: extractState.query_sig\n    },\n    page_number: mergeState.last_page + 1,\n    seen_vendor_ids: extractState.radar_ids,\n    first_id: extractState.radar_ids[0],\n    last_id: extractState.radar_ids[extractState.radar_ids.length - 1]\n  }\n}];"
      },
      "id": "e846c961-29d8-4761-b837-e259cdda75bb",
      "name": "Update Lead Count",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Check if we need to continue to next ZIP\nconst state = $('Update Lead Count').first().json;\n\nconsole.log(`ZIP ${state.current_zip} complete. Moving to next ZIP...`);\n\nreturn [{\n  json: state\n}];"
      },
      "id": "2f45adc8-bf64-4005-a7dc-fc8f67167b80",
      "name": "ZIP Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2672,
        384
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1627732c-24a5-4979-bb81-c699a8d832ed",
      "name": "Loop Check (ZIPs)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2896,
        264
      ]
    },
    {
      "parameters": {
        "jsCode": "// Broker processing complete\nconst state = $input.first().json;\n\nconsole.log(`\\n✓ Broker ${state.broker_name} complete: ${state.leads_pulled_today}/${state.daily_target} leads`);\n\nreturn [{\n  json: {\n    session_id: state.session_id,\n    broker_id: state.broker_id,\n    broker_name: state.broker_name,\n    daily_target: state.daily_target,\n    leads_pulled_today: state.leads_pulled_today || 0,\n    source: state.source\n  }\n}];"
      },
      "id": "5dd2b678-a8af-4337-9a50-440be099173d",
      "name": "Broker Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3120,
        336
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "67eba647-91d6-4495-9293-32a335c0031c",
      "name": "Loop Check (Brokers)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3344,
        456
      ]
    },
    {
      "parameters": {
        "jsCode": "// Final summary\nconst sessionId = $('Initialize Session').first().json.session_id;\n\nconsole.log('\\n=================================');\nconsole.log('PropertyRadar Daily Pull Complete');\nconsole.log(`Session ID: ${sessionId}`);\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    status: 'complete',\n    completed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "7628a9b5-c915-43a9-a965-cd249380631a",
      "name": "Final Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3568,
        456
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/upsert_lead_from_radar",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"p\": {\n    \"radar_id\": $json.radar_id,\n    \"address_line1\": $json.property_address,\n    \"city\": $json.property_city,\n    \"state\": $json.property_state,\n    \"postal_code\": $json.property_zip,\n    \"property_value\": $json.property_value,\n    \"estimated_equity\": $json.estimated_equity,\n    \"age\": $json.age,\n    \"owner_occupied\": $json.owner_occupied,\n    \"apn\": $json.apn,\n    \"addr_hash\": $json.addr_hash,\n    \"assigned_broker_id\": $json.assigned_broker_id,\n    \"radar_property_data\": $json.radar_property_data,\n    \"radar_api_version\": $json.radar_api_version,\n    \"source\": \"propertyradar\"\n  }\n}\n}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1552,
        384
      ],
      "id": "97e2d567-6e8e-40e3-8ae0-0d5da532c8f7",
      "name": "Upsert Lead to Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/lead_source_events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"source\": $json.source,\n  \"pull_params\": $json.pull_params,\n  \"page_number\": $json.page_number,\n  \"seen_vendor_ids\": $json.seen_vendor_ids,\n  \"first_id\": $json.first_id,\n  \"last_id\": $json.last_id\n}\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2224,
        384
      ],
      "id": "92ff770f-c4fd-4692-9362-f4a3cbd9bfef",
      "name": "Log Source Event",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/get_or_create_bookmark",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"p_source\": \"propertyradar\",\n  \"p_query_sig\": \"{{ $json.query_sig }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        264
      ],
      "id": "2070c7c7-af73-4681-a607-3c061dd20581",
      "name": "Get Bookmark",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/has_vendor_ids_been_seen",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"p_source\": \"propertyradar\",\n  \"p_query_sig\": \"{{ $json.query_sig }}\",\n  \"p_vendor_ids\": {{ JSON.stringify($json.radar_ids) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        264
      ],
      "id": "4f6de526-e530-4790-b19c-4ee33cba8ffe",
      "name": "Check If Seen Before",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/source_bookmarks?id=eq.{{ $('Merge Bookmark').first().json.bookmark_id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"last_page_fetched\": $json.page_number,\n  \"updated_at\": new Date().toISOString()\n}\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2448,
        384
      ],
      "id": "4846672d-3458-4c99-a69f-ff750b07159c",
      "name": "Update Bookmark",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -688,
        528
      ],
      "id": "11071416-768c-4df8-8e9a-a32a18537b76",
      "name": "Loop Through ZIPs"
    }
  ],
  "connections": {
    "Daily Trigger (6am)": {
      "main": [
        [
          {
            "node": "Initialize Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Session": {
      "main": [
        [
          {
            "node": "Fetch Active Brokers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Brokers": {
      "main": [
        [
          {
            "node": "Init Broker Pull",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init Broker Pull": {
      "main": [
        [
          {
            "node": "Fetch Broker Territories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Broker Territories": {
      "main": [
        [
          {
            "node": "Loop Through ZIPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare ZIP Pull": {
      "main": [
        [
          {
            "node": "Target Reached?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Target Reached?": {
      "main": [
        [
          {
            "node": "Skip to End",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Bookmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Skip to End": {
      "main": [
        [
          {
            "node": "Loop Through ZIPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Bookmark": {
      "main": [
        [
          {
            "node": "PropertyRadar API Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PropertyRadar API Call": {
      "main": [
        [
          {
            "node": "Extract Radar IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Radar IDs": {
      "main": [
        [
          {
            "node": "Check If Seen Before",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Already Seen?": {
      "main": [
        [
          {
            "node": "Stop (Already Seen)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse PropertyRadar Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stop (Already Seen)": {
      "main": [
        [
          {
            "node": "Loop Through ZIPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse PropertyRadar Results": {
      "main": [
        [
          {
            "node": "Upsert Lead to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Queue for Enrichment": {
      "main": [
        [
          {
            "node": "Update Lead Count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead Count": {
      "main": [
        [
          {
            "node": "Log Source Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ZIP Complete": {
      "main": [
        [
          {
            "node": "Loop Through ZIPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Check (ZIPs)": {
      "main": [
        [
          {
            "node": "Loop Through ZIPs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Broker Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Broker Complete": {
      "main": [
        [
          {
            "node": "Loop Check (Brokers)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Check (Brokers)": {
      "main": [
        [
          {
            "node": "Init Broker Pull",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Final Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Lead to Supabase": {
      "main": [
        [
          {
            "node": "Queue for Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Source Event": {
      "main": [
        [
          {
            "node": "Update Bookmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Bookmark": {
      "main": [
        [
          {
            "node": "Merge Bookmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Seen Before": {
      "main": [
        [
          {
            "node": "Already Seen?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Bookmark": {
      "main": [
        [
          {
            "node": "ZIP Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Through ZIPs": {
      "main": [
        [
          {
            "node": "Prepare ZIP Pull",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Broker Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "4ca45576dabef27a95f92525a5f6415fb3e8061f7037b2ec7fb4ba1bb1cb56c0"
  }
}