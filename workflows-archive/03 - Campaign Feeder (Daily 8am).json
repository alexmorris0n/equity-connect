{
  "name": "Campaign Feeder (Parallel Batch)",
  "meta": {
    "description": "HIGH-PERFORMANCE campaign feeder - Processes leads in parallel batches",
    "documentation": {
      "purpose": "Add enriched leads to Instantly campaigns in bulk for multi-broker scale",
      "performance": {
        "sequential_old": "2,500 leads = 1.3 hours",
        "parallel_new": "2,500 leads = ~5 minutes",
        "improvement": "16x faster"
      },
      "features": [
        "Bulk processing (no loop-per-lead bottleneck)",
        "Parallel batch API calls to Instantly",
        "Bulk database updates (single RPC call per campaign)",
        "Fresh leads only (campaign_history empty)",
        "Percentage-based assignment (works in any market)",
        "Scalable to 50+ brokers × 250 leads/day"
      ],
      "flow": [
        "1. Daily 8am trigger",
        "2. Get all fresh leads (returns array of 100s-1000s)",
        "3. Bulk assign campaigns (processes entire array in one code execution)",
        "4. Group by campaign type (3 arrays: no_more_payments, cash_unlocked, high_equity)",
        "5. Loop 3 times (once per campaign type):",
        "   - Get campaign config",
        "   - Bulk add all leads to Instantly campaign",
        "   - Bulk update campaign_history for all leads",
        "6. Log completion"
      ],
      "scalability": {
        "1_broker": "250 leads/day = 30 seconds",
        "10_brokers": "2,500 leads/day = 5 minutes",
        "50_brokers": "12,500 leads/day = 25 minutes"
      }
    }
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "id": "trigger-daily-8am",
      "name": "Daily Trigger (8am)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [240, 240]
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "vw_campaign_ready_leads",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [480, 240],
      "id": "get-ready-leads",
      "name": "Get All Fresh Leads",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// BULK ASSIGN - Process ALL leads at once (no loop!)\n// Assigns campaigns based on equity percentage (scalable for any market)\nconst allLeads = $input.all();\n\nif (allLeads.length === 0) {\n  console.log('No fresh leads to process');\n  return [];\n}\n\nconsole.log(`Processing ${allLeads.length} fresh leads in bulk...`);\n\nconst processedLeads = allLeads.map(item => {\n  const lead = item.json;\n  \n  const equityAmount = lead.estimated_equity || 0;\n  const propertyValue = lead.property_value || 0;\n  const history = lead.campaign_history || [];\n  \n  // Skip if already has campaign history (shouldn't happen with view filter)\n  if (history.length > 0) {\n    return null;\n  }\n  \n  // Calculate equity percentage (scalable for any market)\n  const equityPercent = propertyValue > 0 ? (equityAmount / propertyValue) * 100 : 0;\n  \n  // Assign campaign based on equity percentage\n  let assignedArchetype = '';\n  if (equityPercent >= 80) {\n    assignedArchetype = 'high_equity_special';\n  } else if (equityPercent >= 50) {\n    assignedArchetype = 'cash_unlocked';\n  } else {\n    assignedArchetype = 'no_more_payments';\n  }\n  \n  // Calculate merge fields\n  const equity50 = Math.round(equityAmount * 0.50);\n  const equity60 = Math.round(equityAmount * 0.60);\n  const equityShort = `$${Math.round(equityAmount / 1000)}K`;\n  const estimatedPayment = Math.round((propertyValue * 0.4) * 0.005);\n  const valueLow = Math.round(propertyValue * 0.9 / 1000) * 1000;\n  const valueHigh = Math.round(propertyValue * 1.1 / 1000) * 1000;\n  const valueRange = `$${(valueLow/1000).toFixed(0)}K-$${(valueHigh/1000).toFixed(0)}K`;\n  \n  return {\n    ...lead,\n    assigned_archetype: assignedArchetype,\n    equity_percentage: Math.round(equityPercent),\n    equity_50_amount: equity50,\n    equity_60_amount: equity60,\n    equity_short: equityShort,\n    estimated_monthly_payment: estimatedPayment,\n    property_value_range: valueRange,\n    entry_timestamp: new Date().toISOString()\n  };\n}).filter(Boolean);\n\nconsole.log(`✅ Assigned campaigns to ${processedLeads.length} leads`);\nconsole.log(`   High Equity (80%+): ${processedLeads.filter(l => l.assigned_archetype === 'high_equity_special').length}`);\nconsole.log(`   Cash Unlocked (50-79%): ${processedLeads.filter(l => l.assigned_archetype === 'cash_unlocked').length}`);\nconsole.log(`   No More Payments (<50%): ${processedLeads.filter(l => l.assigned_archetype === 'no_more_payments').length}`);\n\nreturn processedLeads.map(lead => ({ json: lead }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [720, 240],
      "id": "bulk-assign",
      "name": "Bulk Assign Campaigns"
    },
    {
      "parameters": {
        "jsCode": "// Group leads by assigned campaign type\nconst allLeads = $input.all();\n\n// Group by campaign archetype\nconst grouped = {\n  no_more_payments: [],\n  cash_unlocked: [],\n  high_equity_special: []\n};\n\nallLeads.forEach(item => {\n  const lead = item.json;\n  const archetype = lead.assigned_archetype;\n  if (grouped[archetype]) {\n    grouped[archetype].push(lead);\n  }\n});\n\n// Return array of campaign batches (only non-empty ones)\nconst batches = [];\nif (grouped.no_more_payments.length > 0) {\n  batches.push({\n    archetype: 'no_more_payments',\n    leads: grouped.no_more_payments,\n    count: grouped.no_more_payments.length\n  });\n}\nif (grouped.cash_unlocked.length > 0) {\n  batches.push({\n    archetype: 'cash_unlocked',\n    leads: grouped.cash_unlocked,\n    count: grouped.cash_unlocked.length\n  });\n}\nif (grouped.high_equity_special.length > 0) {\n  batches.push({\n    archetype: 'high_equity_special',\n    leads: grouped.high_equity_special,\n    count: grouped.high_equity_special.length\n  });\n}\n\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log('Campaign Batches Created:');\nconsole.log(`  No More Payments: ${grouped.no_more_payments.length} leads`);\nconsole.log(`  Cash Unlocked: ${grouped.cash_unlocked.length} leads`);\nconsole.log(`  High Equity: ${grouped.high_equity_special.length} leads`);\nconsole.log(`  Total batches to process: ${batches.length}`);\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\nreturn batches.map(batch => ({ json: batch }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [960, 240],
      "id": "group-by-campaign",
      "name": "Group By Campaign Type"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "loop-campaigns",
      "name": "Loop Campaign Types (3x)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1200, 240]
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "campaigns",
        "filters": {
          "conditions": [
            {
              "keyName": "archetype",
              "condition": "eq",
              "keyValue": "={{ $json.archetype }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1440, 160],
      "id": "get-campaign-config",
      "name": "Get Campaign Config",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "brokers",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1440, 80],
      "id": "get-brokers",
      "name": "Get All Brokers",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare leads for bulk Instantly import with broker info\nconst batch = $('Loop Campaign Types (3x)').first().json;\nconst campaignConfig = $('Get Campaign Config').first().json;\nconst allBrokers = $('Get All Brokers').all();\n\n// Create broker lookup map\nconst brokerMap = {};\nallBrokers.forEach(item => {\n  const broker = item.json;\n  brokerMap[broker.id] = {\n    name: broker.contact_name || broker.company_name || 'Equity Connect Team',\n    nmls: broker.nmls_number || ''\n  };\n});\n\nconsole.log(`━━━━━━━━━━━━━━━━━━━━━━━━━━━`);\nconsole.log(`Processing: ${batch.archetype}`);\nconsole.log(`Campaign ID: ${campaignConfig.instantly_campaign_id}`);\nconsole.log(`Lead count: ${batch.count}`);\nconsole.log(`Brokers loaded: ${Object.keys(brokerMap).length}`);\nconsole.log(`━━━━━━━━━━━━━━━━━━━━━━━━━━━`);\n\n// Return leads with broker info injected\nreturn batch.leads.map(lead => {\n  const broker = brokerMap[lead.assigned_broker_id] || { name: 'Equity Connect Team', nmls: '' };\n  \n  return {\n    json: {\n      ...lead,\n      instantly_campaign_id: campaignConfig.instantly_campaign_id,\n      campaign_name: campaignConfig.campaign_name,\n      campaign_archetype: batch.archetype,\n      broker_name: broker.name,\n      broker_nmls: broker.nmls\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 160],
      "id": "prepare-batch",
      "name": "Prepare Batch with Broker Info"
    },
    {
      "parameters": {
        "resource": "lead",
        "operation": "addToCampaign",
        "email": "={{ $json.primary_email }}",
        "firstName": "={{ $json.first_name }}",
        "lastName": "={{ $json.last_name }}",
        "campaign": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.instantly_campaign_id }}"
        },
        "customFields": {
          "customFieldsValues": [
            {
              "name": "property_address",
              "value": "={{ $json.property_address }}"
            },
            {
              "name": "property_city",
              "value": "={{ $json.property_city }}"
            },
            {
              "name": "property_value",
              "value": "={{ '$' + Math.round($json.property_value).toLocaleString() }}"
            },
            {
              "name": "estimated_equity",
              "value": "={{ '$' + Math.round($json.estimated_equity).toLocaleString() }}"
            },
            {
              "name": "equity_50_percent",
              "value": "={{ '$' + $json.equity_50_amount.toLocaleString() }}"
            },
            {
              "name": "equity_60_percent",
              "value": "={{ '$' + $json.equity_60_amount.toLocaleString() }}"
            },
            {
              "name": "equity_formatted_short",
              "value": "={{ $json.equity_short }}"
            },
            {
              "name": "estimated_monthly_payment",
              "value": "={{ '$' + $json.estimated_monthly_payment.toLocaleString() }}"
            },
            {
              "name": "property_value_range",
              "value": "={{ $json.property_value_range }}"
            },
            {
              "name": "broker_name",
              "value": "={{ $json.broker_name }}"
            },
            {
              "name": "broker_nmls",
              "value": "={{ $json.broker_nmls }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-instantly.instantly",
      "typeVersion": 1,
      "position": [1920, 160],
      "id": "add-to-instantly",
      "name": "Add to Instantly (Batch)",
      "credentials": {
        "instantlyApi": {
          "id": "TSGbMOFEJY9CmhHW",
          "name": "Instantly account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collect all lead IDs from this batch for bulk database update\nconst allBatchLeads = $input.all();\nconst batch = $('Loop Campaign Types (3x)').first().json;\nconst campaignConfig = $('Get Campaign Config').first().json;\n\n// Extract lead IDs and entry timestamps\nconst leadUpdates = allBatchLeads.map(item => ({\n  lead_id: item.json.id,\n  entry_timestamp: item.json.entry_timestamp\n}));\n\nconsole.log(`Added ${leadUpdates.length} leads to Instantly campaign: ${batch.archetype}`);\n\nreturn [{\n  json: {\n    archetype: batch.archetype,\n    campaign_id: campaignConfig.instantly_campaign_id,\n    campaign_name: campaignConfig.campaign_name,\n    lead_updates: leadUpdates,\n    count: leadUpdates.length\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2160, 160],
      "id": "aggregate-batch",
      "name": "Aggregate Batch Results"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mxnqfwuhvurajrgoefyg.supabase.co/rest/v1/rpc/bulk_add_to_campaign_history",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"p_archetype\": $json.archetype,\n  \"p_campaign_id\": $json.campaign_id,\n  \"p_campaign_name\": $json.campaign_name,\n  \"p_lead_updates\": $json.lead_updates\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2400, 160],
      "id": "bulk-update-db",
      "name": "Bulk Update Database",
      "credentials": {
        "supabaseApi": {
          "id": "pvE2B3BDrLhctd5B",
          "name": "SupaBase Equity Connect"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log completion and loop back\nconst result = $input.first().json;\n\nconsole.log(`✅ ${result.archetype}: ${result.updated_count || result.count} leads processed`);\n\nreturn [$input.first()];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2640, 160],
      "id": "log-batch",
      "name": "Log Batch Complete"
    },
    {
      "parameters": {
        "jsCode": "// Final summary\nconst allBatches = $input.all();\nconst totalLeads = allBatches.reduce((sum, item) => sum + (item.json.updated_count || item.json.count || 0), 0);\n\nconst byArchetype = {\n  no_more_payments: 0,\n  cash_unlocked: 0,\n  high_equity_special: 0\n};\n\nallBatches.forEach(item => {\n  const archetype = item.json.archetype;\n  const count = item.json.updated_count || item.json.count || 0;\n  if (byArchetype[archetype] !== undefined) {\n    byArchetype[archetype] = count;\n  }\n});\n\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\nconsole.log('🎉 Campaign Feeder Complete (Parallel)');\nconsole.log(`Total Leads Processed: ${totalLeads}`);\nconsole.log(`  No More Payments: ${byArchetype.no_more_payments}`);\nconsole.log(`  Cash Unlocked: ${byArchetype.cash_unlocked}`);\nconsole.log(`  High Equity Special: ${byArchetype.high_equity_special}`);\nconsole.log(`Completed: ${new Date().toISOString()}`);\nconsole.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n\nreturn [{\n  json: {\n    status: 'success',\n    total_leads: totalLeads,\n    breakdown: byArchetype,\n    completed_at: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1440, 400],
      "id": "log-completion",
      "name": "Log Final Summary"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1680, 400],
      "id": "done",
      "name": "All Campaigns Processed"
    }
  ],
  "connections": {
    "Daily Trigger (8am)": {
      "main": [[{"node": "Get All Fresh Leads", "type": "main", "index": 0}]]
    },
    "Get All Fresh Leads": {
      "main": [[{"node": "Bulk Assign Campaigns", "type": "main", "index": 0}]]
    },
    "Bulk Assign Campaigns": {
      "main": [[{"node": "Group By Campaign Type", "type": "main", "index": 0}]]
    },
    "Group By Campaign Type": {
      "main": [[{"node": "Loop Campaign Types (3x)", "type": "main", "index": 0}]]
    },
    "Loop Campaign Types (3x)": {
      "main": [
        [{"node": "Log Final Summary", "type": "main", "index": 0}],
        [{"node": "Get Campaign Config", "type": "main", "index": 0}]
      ]
    },
    "Get Campaign Config": {
      "main": [[{"node": "Get All Brokers", "type": "main", "index": 0}]]
    },
    "Get All Brokers": {
      "main": [[{"node": "Prepare Batch with Broker Info", "type": "main", "index": 0}]]
    },
    "Prepare Batch with Broker Info": {
      "main": [[{"node": "Add to Instantly (Batch)", "type": "main", "index": 0}]]
    },
    "Add to Instantly (Batch)": {
      "main": [[{"node": "Aggregate Batch Results", "type": "main", "index": 0}]]
    },
    "Aggregate Batch Results": {
      "main": [[{"node": "Bulk Update Database", "type": "main", "index": 0}]]
    },
    "Bulk Update Database": {
      "main": [[{"node": "Log Batch Complete", "type": "main", "index": 0}]]
    },
    "Log Batch Complete": {
      "main": [[{"node": "Loop Campaign Types (3x)", "type": "main", "index": 0}]]
    },
    "Log Final Summary": {
      "main": [[{"node": "All Campaigns Processed", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}

