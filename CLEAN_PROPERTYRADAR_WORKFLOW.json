{
  "name": "PropertyRadar Pull Worker (Clean)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [{"field": "hours"}]
        }
      },
      "id": "cron-trigger",
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [100, 300],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "broker_territories",
        "returnAll": true,
        "filters": {
          "conditions": [
            {"keyName": "active", "condition": "is", "keyValue": "true"}
          ]
        }
      },
      "id": "fetch-territories",
      "name": "Fetch Territories",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [300, 300],
      "credentials": {
        "supabaseApi": {"id": "pvE2B3BDrLhctd5B", "name": "SupaBase Equity Connect"}
      }
    },
    {
      "parameters": {
        "jsCode": "// Get first zip code for testing\nconst territories = $input.all();\nconst firstTerritory = territories[0].json;\n\nreturn [{\n  json: {\n    broker_id: firstTerritory.broker_id,\n    current_zip: firstTerritory.zip_code,\n    market: firstTerritory.market_name,\n    page: 0\n  }\n}];"
      },
      "id": "simple-zip-select",
      "name": "Select Zip",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.propertyradar.com/v1/properties",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "Purchase",
              "value": "0"
            },
            {
              "name": "Limit",
              "value": "50"
            },
            {
              "name": "Start",
              "value": "={{ $('Select Zip').first().json.page * 50 }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {"name": "Content-Type", "value": "application/json"}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({Criteria: [{name: 'ZipFive', value: [$('Select Zip').first().json.current_zip]}, {name: 'Age', value: [[62, null]]}, {name: 'AvailableEquity', value: [[150000, null]]}, {name: 'EquityPercent', value: [[40, null]]}, {name: 'isSameMailingOrExempt', value: [1]}, {name: 'PropertyType', value: [{name: 'PType', value: ['SFR', 'DPX', 'TPX', 'FPX', 'CND']}]}, {name: 'AVM', value: [[400000, 3000000]]}, {name: 'CLTV', value: [[null, 60]]}]}) }}",
        "options": {"timeout": 60000}
      },
      "id": "propertyradar-api",
      "name": "PropertyRadar Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [700, 300],
      "credentials": {
        "httpBearerAuth": {"id": "81i7WbQilIMSh4E3", "name": "PropertyRadar"}
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse PropertyRadar response\nconst response = $input.first().json;\nconst results = response.results || [];\n\nconsole.log(`PropertyRadar returned ${results.length} properties`);\nconsole.log(`Total cost: $${response.totalCost}`);\nconsole.log(`Total matching: ${response.totalResultCount}`);\n\nif (results.length === 0) {\n  return [{\n    json: {\n      message: 'No results',\n      totalMatching: response.totalResultCount,\n      cost: response.totalCost\n    }\n  }];\n}\n\nconst brokerId = $('Select Zip').first().json.broker_id;\n\nreturn results.map(prop => ({\n  json: {\n    radar_id: prop.RadarID,\n    property_address: prop.Address,\n    property_city: prop.City,\n    property_state: prop.State,\n    property_zip: prop.ZipFive,\n    first_name: prop.OwnerFirstName || null,\n    last_name: prop.OwnerLastName || null,\n    age: prop.Age || null,\n    property_value: prop.AVM,\n    estimated_equity: prop.AvailableEquity,\n    email: prop.Email || null,\n    phone: prop.Phone || null,\n    apn: prop.APN || null,\n    county_fips: prop.FIPS || null,\n    assigned_broker_id: brokerId,\n    source: 'propertyradar',\n    radar_property_data: prop\n  }\n}));"
      },
      "id": "parse-results",
      "name": "Parse Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Cron Trigger": {
      "main": [[{"node": "Fetch Territories", "type": "main", "index": 0}]]
    },
    "Fetch Territories": {
      "main": [[{"node": "Select Zip", "type": "main", "index": 0}]]
    },
    "Select Zip": {
      "main": [[{"node": "PropertyRadar Search", "type": "main", "index": 0}]]
    },
    "PropertyRadar Search": {
      "main": [[{"node": "Parse Results", "type": "main", "index": 0}]]
    }
  },
  "settings": {},
  "pinData": {}
}
